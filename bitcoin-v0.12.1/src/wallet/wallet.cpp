// Copyright (c) 2009-2010 Satoshi Nakamoto
// Copyright (c) 2009-2015 The Bitcoin Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "wallet/wallet.h"

#include "base58.h"
#include "checkpoints.h"
#include "chain.h"
#include "coincontrol.h"
#include "consensus/consensus.h"
#include "consensus/validation.h"
#include "key.h"
#include "keystore.h"
#include "main.h"
#include "net.h"
#include "policy/policy.h"
#include "primitives/block.h"
#include "primitives/transaction.h"
#include "script/script.h"
#include "script/sign.h"
#include "timedata.h"
#include "txmempool.h"
#include "util.h"
#include "utilmoneystr.h"

#include <assert.h>

#include <boost/algorithm/string/replace.hpp>
#include <boost/filesystem.hpp>
#include <boost/thread.hpp>

using namespace std;

/** Transaction fee set by the user */ // 用户设置的交易费
CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE); // 默认交易费为 0
CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE; // 交易费上限为 0.1 BTC
unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;
bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;
bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS; // 免费发送交易标志，默认为 false

/**
 * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)
 * Override with -mintxfee
 */
CFeeRate CWallet::minTxFee = CFeeRate(DEFAULT_TRANSACTION_MINFEE);
/**
 * If fee estimation does not have enough data to provide estimates, use this fee instead.
 * Has no effect if not using fee estimation
 * Override with -fallbackfee
 */
CFeeRate CWallet::fallbackFee = CFeeRate(DEFAULT_FALLBACK_FEE);

const uint256 CMerkleTx::ABANDON_HASH(uint256S("0000000000000000000000000000000000000000000000000000000000000001"));

/** @defgroup mapWallet
 *
 * @{
 */

struct CompareValueOnly
{
    bool operator()(const pair<CAmount, pair<const CWalletTx*, unsigned int> >& t1,
                    const pair<CAmount, pair<const CWalletTx*, unsigned int> >& t2) const
    {
        return t1.first < t2.first;
    }
};

std::string COutput::ToString() const
{
    return strprintf("COutput(%s, %d, %d) [%s]", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->vout[i].nValue));
}

const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const
{
    LOCK(cs_wallet);
    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(hash);
    if (it == mapWallet.end())
        return NULL;
    return &(it->second);
}

CPubKey CWallet::GenerateNewKey()
{
    AssertLockHeld(cs_wallet); // mapKeyMetadata
    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets

    CKey secret; // 创建一个私钥
    secret.MakeNewKey(fCompressed); // 随机生成一个数来初始化私钥，注意边界，下界为 1

    // Compressed public keys were introduced in version 0.6.0
    if (fCompressed) // 是否压缩公钥，0.6.0 版引入
        SetMinVersion(FEATURE_COMPRPUBKEY);

    CPubKey pubkey = secret.GetPubKey(); // 获取与私钥对应的公钥（椭圆曲线加密算法）
    assert(secret.VerifyPubKey(pubkey)); // 验证私钥公钥对是否匹配

    // Create new metadata // 创建新元数据/中继数据
    int64_t nCreationTime = GetTime(); // 获取当前时间
    mapKeyMetadata[pubkey.GetID()] = CKeyMetadata(nCreationTime);
    if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)
        nTimeFirstKey = nCreationTime;

    if (!AddKeyPubKey(secret, pubkey))
        throw std::runtime_error("CWallet::GenerateNewKey(): AddKey failed");
    return pubkey; // 返回对应的公钥
}

bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)
{
    AssertLockHeld(cs_wallet); // mapKeyMetadata
    if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))
        return false;

    // check if we need to remove from watch-only
    CScript script;
    script = GetScriptForDestination(pubkey.GetID());
    if (HaveWatchOnly(script))
        RemoveWatchOnly(script);
    script = GetScriptForRawPubKey(pubkey);
    if (HaveWatchOnly(script))
        RemoveWatchOnly(script);

    if (!fFileBacked)
        return true;
    if (!IsCrypted()) {
        return CWalletDB(strWalletFile).WriteKey(pubkey,
                                                 secret.GetPrivKey(),
                                                 mapKeyMetadata[pubkey.GetID()]);
    }
    return true;
}

bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,
                            const vector<unsigned char> &vchCryptedSecret)
{
    if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))
        return false;
    if (!fFileBacked)
        return true;
    {
        LOCK(cs_wallet);
        if (pwalletdbEncryption)
            return pwalletdbEncryption->WriteCryptedKey(vchPubKey,
                                                        vchCryptedSecret,
                                                        mapKeyMetadata[vchPubKey.GetID()]);
        else
            return CWalletDB(strWalletFile).WriteCryptedKey(vchPubKey,
                                                            vchCryptedSecret,
                                                            mapKeyMetadata[vchPubKey.GetID()]);
    }
    return false;
}

bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)
{
    AssertLockHeld(cs_wallet); // mapKeyMetadata
    if (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))
        nTimeFirstKey = meta.nCreateTime;

    mapKeyMetadata[pubkey.GetID()] = meta;
    return true;
}

bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)
{
    return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);
}

bool CWallet::AddCScript(const CScript& redeemScript)
{
    if (!CCryptoKeyStore::AddCScript(redeemScript))
        return false;
    if (!fFileBacked)
        return true;
    return CWalletDB(strWalletFile).WriteCScript(Hash160(redeemScript), redeemScript);
}

bool CWallet::LoadCScript(const CScript& redeemScript)
{
    /* A sanity check was added in pull #3843 to avoid adding redeemScripts
     * that never can be redeemed. However, old wallets may still contain
     * these. Do not add them to the wallet and warn. */
    if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)
    {
        std::string strAddr = CBitcoinAddress(CScriptID(redeemScript)).ToString();
        LogPrintf("%s: Warning: This wallet contains a redeemScript of size %i which exceeds maximum size %i thus can never be redeemed. Do not use address %s.\n",
            __func__, redeemScript.size(), MAX_SCRIPT_ELEMENT_SIZE, strAddr);
        return true;
    }

    return CCryptoKeyStore::AddCScript(redeemScript);
}

bool CWallet::AddWatchOnly(const CScript &dest)
{
    if (!CCryptoKeyStore::AddWatchOnly(dest)) // 添加 watch-only 地址到密钥库
        return false;
    nTimeFirstKey = 1; // No birthday information for watch-only keys. // watch-only 密钥没有创建时间信息。
    NotifyWatchonlyChanged(true); // 通知 watch-only 地址已改变
    if (!fFileBacked)
        return true;
    return CWalletDB(strWalletFile).WriteWatchOnly(dest); // 把 watch-only 地址写入钱包数据库文件中
}

bool CWallet::RemoveWatchOnly(const CScript &dest)
{
    AssertLockHeld(cs_wallet);
    if (!CCryptoKeyStore::RemoveWatchOnly(dest)) // 从密钥库中移除 watch-only 地址
        return false;
    if (!HaveWatchOnly()) // 若没有 watch-only 地址
        NotifyWatchonlyChanged(false); // 通知 watch-only 地址已改变
    if (fFileBacked) // 若文件备份开启
        if (!CWalletDB(strWalletFile).EraseWatchOnly(dest)) // 从钱包数据库中擦除 watch-only 地址
            return false;

    return true;
}

bool CWallet::LoadWatchOnly(const CScript &dest) // 加载 watch-only 地址
{
    return CCryptoKeyStore::AddWatchOnly(dest); // 只把 watch-only 地址放入内存中的密钥库
}

bool CWallet::Unlock(const SecureString& strWalletPassphrase)
{
    CCrypter crypter;
    CKeyingMaterial vMasterKey;

    {
        LOCK(cs_wallet);
        BOOST_FOREACH(const MasterKeyMap::value_type& pMasterKey, mapMasterKeys)
        {
            if(!crypter.SetKeyFromPassphrase(strWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))
                return false;
            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey))
                continue; // try another master key
            if (CCryptoKeyStore::Unlock(vMasterKey))
                return true;
        }
    }
    return false;
}

bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase)
{
    bool fWasLocked = IsLocked(); // 获取当前钱包加密状态作为以前加密状态

    {
        LOCK(cs_wallet); // 钱包上锁
        Lock(); // 锁定（加密）钱包

        CCrypter crypter;
        CKeyingMaterial vMasterKey;
        BOOST_FOREACH(MasterKeyMap::value_type& pMasterKey, mapMasterKeys) // 遍历主密钥映射列表
        {
            if(!crypter.SetKeyFromPassphrase(strOldWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod)) // 从旧密码设置密钥
                return false;
            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey)) // 解密
                return false;
            if (CCryptoKeyStore::Unlock(vMasterKey)) // 解锁
            {
                int64_t nStartTime = GetTimeMillis();
                crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod); // 使用新密码获取密钥
                pMasterKey.second.nDeriveIterations = pMasterKey.second.nDeriveIterations * (100 / ((double)(GetTimeMillis() - nStartTime))); // 计算迭代计数

                nStartTime = GetTimeMillis();
                crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod); // 第 2 次设置
                pMasterKey.second.nDeriveIterations = (pMasterKey.second.nDeriveIterations + pMasterKey.second.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2; // 重新计算迭代计数

                if (pMasterKey.second.nDeriveIterations < 25000) // 迭代计数最小 25000
                    pMasterKey.second.nDeriveIterations = 25000;

                LogPrintf("Wallet passphrase changed to an nDeriveIterations of %i\n", pMasterKey.second.nDeriveIterations);

                if (!crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod)) // 第 3 次设置
                    return false;
                if (!crypter.Encrypt(vMasterKey, pMasterKey.second.vchCryptedKey)) // 加密
                    return false;
                CWalletDB(strWalletFile).WriteMasterKey(pMasterKey.first, pMasterKey.second); // 把新密钥写入钱包数据库
                if (fWasLocked) // 若密码改变前未加密状态
                    Lock(); // 锁定（加密)
                return true;
            }
        }
    }

    return false;
}

void CWallet::SetBestChain(const CBlockLocator& loc)
{
    CWalletDB walletdb(strWalletFile); // 创建钱包数据库局部对象
    walletdb.WriteBestBlock(loc); // 写入最佳块位置到钱包数据库文件
}

bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn, bool fExplicit)
{
    LOCK(cs_wallet); // nWalletVersion
    if (nWalletVersion >= nVersion)
        return true;

    // when doing an explicit upgrade, if we pass the max version permitted, upgrade all the way
    if (fExplicit && nVersion > nWalletMaxVersion)
            nVersion = FEATURE_LATEST;

    nWalletVersion = nVersion;

    if (nVersion > nWalletMaxVersion)
        nWalletMaxVersion = nVersion;

    if (fFileBacked)
    {
        CWalletDB* pwalletdb = pwalletdbIn ? pwalletdbIn : new CWalletDB(strWalletFile);
        if (nWalletVersion > 40000)
            pwalletdb->WriteMinVersion(nWalletVersion);
        if (!pwalletdbIn)
            delete pwalletdb;
    }

    return true;
}

bool CWallet::SetMaxVersion(int nVersion) // 设置钱包最大版本
{
    LOCK(cs_wallet); // nWalletVersion, nWalletMaxVersion
    // cannot downgrade below current version // 不能降级至当前版本以下
    if (nWalletVersion > nVersion) // 若设置版本大于等于当前
        return false;

    nWalletMaxVersion = nVersion;

    return true;
}

set<uint256> CWallet::GetConflicts(const uint256& txid) const
{
    set<uint256> result;
    AssertLockHeld(cs_wallet);

    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(txid);
    if (it == mapWallet.end())
        return result;
    const CWalletTx& wtx = it->second;

    std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range;

    BOOST_FOREACH(const CTxIn& txin, wtx.vin)
    {
        if (mapTxSpends.count(txin.prevout) <= 1)
            continue;  // No conflict if zero or one spends
        range = mapTxSpends.equal_range(txin.prevout);
        for (TxSpends::const_iterator it = range.first; it != range.second; ++it)
            result.insert(it->second);
    }
    return result;
}

void CWallet::Flush(bool shutdown)
{
    bitdb.Flush(shutdown);
}

bool CWallet::Verify(const string& walletFile, string& warningString, string& errorString)
{
    if (!bitdb.Open(GetDataDir())) // 1.若打开数据库失败
    {
        // try moving the database env out of the way // 尝试移动数据库条目
        boost::filesystem::path pathDatabase = GetDataDir() / "database"; // 拼接数据库目录
        boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf("database.%d.bak", GetTime()); // 拼接数据库备份路径
        try {
            boost::filesystem::rename(pathDatabase, pathDatabaseBak); // 重命名为数据库备份名，允许失败
            LogPrintf("Moved old %s to %s. Retrying.\n", pathDatabase.string(), pathDatabaseBak.string());
        } catch (const boost::filesystem::filesystem_error&) { // 允许失败（好吧，不是真的，但并不比我们开始时糟）
            // failure is ok (well, not really, but it's not worse than what we started with)
        }
        
        // try again // 再试一次
        if (!bitdb.Open(GetDataDir())) { // 再次打开数据库，若仍失败，可能意味着我们仍然无法创建数据库环境
            // if it still fails, it probably means we can't even create the database env
            string msg = strprintf(_("Error initializing wallet database environment %s!"), GetDataDir());
            errorString += msg; // 追加错误信息
            return true; // 直接返回 true
        }
    }
    
    if (GetBoolArg("-salvagewallet", false)) // 2.拯救钱包选项，默认关闭
    {
        // Recover readable keypairs: // 恢复可读的密钥对：
        if (!CWalletDB::Recover(bitdb, walletFile, true)) // 恢复可读的密钥对
            return false;
    }
    
    if (boost::filesystem::exists(GetDataDir() / walletFile)) // 3.若钱包文件存在
    {
        CDBEnv::VerifyResult r = bitdb.Verify(walletFile, CWalletDB::Recover); // 验证钱包数据库文件，若文件异常，则进行恢复并返回恢复的结果
        if (r == CDBEnv::RECOVER_OK) // 恢复信息追加
        {
            warningString += strprintf(_("Warning: wallet.dat corrupt, data salvaged!"
                                     " Original wallet.dat saved as wallet.{timestamp}.bak in %s; if"
                                     " your balance or transactions are incorrect you should"
                                     " restore from a backup."), GetDataDir());
        }
        if (r == CDBEnv::RECOVER_FAIL)
            errorString += _("wallet.dat corrupt, salvage failed");
    }
    
    return true; // 4.验证成功，返回 true
}

void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)
{
    // We want all the wallet transactions in range to have the same metadata as
    // the oldest (smallest nOrderPos).
    // So: find smallest nOrderPos:

    int nMinOrderPos = std::numeric_limits<int>::max();
    const CWalletTx* copyFrom = NULL;
    for (TxSpends::iterator it = range.first; it != range.second; ++it)
    {
        const uint256& hash = it->second;
        int n = mapWallet[hash].nOrderPos;
        if (n < nMinOrderPos)
        {
            nMinOrderPos = n;
            copyFrom = &mapWallet[hash];
        }
    }
    // Now copy data from copyFrom to rest:
    for (TxSpends::iterator it = range.first; it != range.second; ++it)
    {
        const uint256& hash = it->second;
        CWalletTx* copyTo = &mapWallet[hash];
        if (copyFrom == copyTo) continue;
        if (!copyFrom->IsEquivalentTo(*copyTo)) continue;
        copyTo->mapValue = copyFrom->mapValue;
        copyTo->vOrderForm = copyFrom->vOrderForm;
        // fTimeReceivedIsTxTime not copied on purpose
        // nTimeReceived not copied on purpose
        copyTo->nTimeSmart = copyFrom->nTimeSmart;
        copyTo->fFromMe = copyFrom->fFromMe;
        copyTo->strFromAccount = copyFrom->strFromAccount;
        // nOrderPos not copied on purpose
        // cached members not copied on purpose
    }
}

/**
 * Outpoint is spent if any non-conflicted transaction
 * spends it:
 */ // 若任何非冲突的交易花费了输出点，那么该输出点是否已花费
bool CWallet::IsSpent(const uint256& hash, unsigned int n) const
{
    const COutPoint outpoint(hash, n);
    pair<TxSpends::const_iterator, TxSpends::const_iterator> range;
    range = mapTxSpends.equal_range(outpoint);

    for (TxSpends::const_iterator it = range.first; it != range.second; ++it)
    {
        const uint256& wtxid = it->second;
        std::map<uint256, CWalletTx>::const_iterator mit = mapWallet.find(wtxid);
        if (mit != mapWallet.end()) {
            int depth = mit->second.GetDepthInMainChain();
            if (depth > 0  || (depth == 0 && !mit->second.isAbandoned()))
                return true; // Spent
        }
    }
    return false;
}

void CWallet::AddToSpends(const COutPoint& outpoint, const uint256& wtxid)
{
    mapTxSpends.insert(make_pair(outpoint, wtxid));

    pair<TxSpends::iterator, TxSpends::iterator> range;
    range = mapTxSpends.equal_range(outpoint);
    SyncMetaData(range);
}


void CWallet::AddToSpends(const uint256& wtxid)
{
    assert(mapWallet.count(wtxid));
    CWalletTx& thisTx = mapWallet[wtxid];
    if (thisTx.IsCoinBase()) // Coinbases don't spend anything!
        return;

    BOOST_FOREACH(const CTxIn& txin, thisTx.vin)
        AddToSpends(txin.prevout, wtxid);
}

bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)
{
    if (IsCrypted()) // 如果钱包已加密
        return false; // 直接退出

    CKeyingMaterial vMasterKey;
    RandAddSeedPerfmon(); // 创建随机数种子

    vMasterKey.resize(WALLET_CRYPTO_KEY_SIZE); // 预开辟密钥大小
    GetRandBytes(&vMasterKey[0], WALLET_CRYPTO_KEY_SIZE); // 获取 32 字节的随机字节

    CMasterKey kMasterKey; // 主密钥对象
    RandAddSeedPerfmon(); // 再次创建随机数种子

    kMasterKey.vchSalt.resize(WALLET_CRYPTO_SALT_SIZE); // 预开辟主密钥盐值大小
    GetRandBytes(&kMasterKey.vchSalt[0], WALLET_CRYPTO_SALT_SIZE); // 获取 8 字节的随机字节

    CCrypter crypter;
    int64_t nStartTime = GetTimeMillis(); // 记录起始时间
    crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, 25000, kMasterKey.nDerivationMethod); // 从用户指定密码设置密钥
    kMasterKey.nDeriveIterations = 2500000 / ((double)(GetTimeMillis() - nStartTime)); // 计算迭代计数

    nStartTime = GetTimeMillis();
    crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod); // 第 2 次调用 sha512 进行加密
    kMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2; // 重新计算迭代计数

    if (kMasterKey.nDeriveIterations < 25000) // 迭代计数最低为 25000
        kMasterKey.nDeriveIterations = 25000;

    LogPrintf("Encrypting Wallet with an nDeriveIterations of %i\n", kMasterKey.nDeriveIterations);

    if (!crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod)) // 第 3 次调用 sha512 获取密钥和初始化向量
        return false;
    if (!crypter.Encrypt(vMasterKey, kMasterKey.vchCryptedKey)) // 
        return false;

    {
        LOCK(cs_wallet); // 钱包上锁
        mapMasterKeys[++nMasterKeyMaxID] = kMasterKey; // 加入主密钥映射
        if (fFileBacked)
        {
            assert(!pwalletdbEncryption);
            pwalletdbEncryption = new CWalletDB(strWalletFile);
            if (!pwalletdbEncryption->TxnBegin()) {
                delete pwalletdbEncryption;
                pwalletdbEncryption = NULL;
                return false;
            }
            pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey); // 写主密钥到钱包数据库
        }

        if (!EncryptKeys(vMasterKey))
        {
            if (fFileBacked) {
                pwalletdbEncryption->TxnAbort();
                delete pwalletdbEncryption;
            } // 我们现在可能有一半加密的密钥在内存，另一半未加密...
            // We now probably have half of our keys encrypted in memory, and half not...
            // die and let the user reload the unencrypted wallet. // 关闭并让用户重新加载未加密的钱包
            assert(false);
        }

        // Encryption was introduced in version 0.4.0 // 加密在版本 0.4.0 引入
        SetMinVersion(FEATURE_WALLETCRYPT, pwalletdbEncryption, true);

        if (fFileBacked) // 文件备份标志
        {
            if (!pwalletdbEncryption->TxnCommit()) {
                delete pwalletdbEncryption;
                // We now have keys encrypted in memory, but not on disk... // 我们现在拥有内存中的加密密钥，但在磁盘上没有...
                // die to avoid confusion and let the user reload the unencrypted wallet. // 尽量避免混淆并让用户重新加载未加密的钱包
                assert(false);
            }

            delete pwalletdbEncryption;
            pwalletdbEncryption = NULL;
        }

        Lock(); // 上锁，标志加密状态
        Unlock(strWalletPassphrase); // 通过用户指定密码解锁
        NewKeyPool(); // 新建密钥池
        Lock(); // 再次上锁

        // Need to completely rewrite the wallet file; if we don't, bdb might keep
        // bits of the unencrypted private key in slack space in the database file.
        CDB::Rewrite(strWalletFile); // 需要完全重写钱包文件；如果我们不这么做，bdb 可能会保留未加密私钥比特位在数据库文件的松散空间。

    }
    NotifyStatusChanged(this); // 通知钱包状态已改变

    return true;
}

int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)
{
    AssertLockHeld(cs_wallet); // nOrderPosNext
    int64_t nRet = nOrderPosNext++; // 序号 +1
    if (pwalletdb) { // 若钱包数据库对象存在
        pwalletdb->WriteOrderPosNext(nOrderPosNext); // 写入数据库
    } else {
        CWalletDB(strWalletFile).WriteOrderPosNext(nOrderPosNext);
    }
    return nRet; // 返回增加后的下一条交易序号
}

void CWallet::MarkDirty()
{
    {
        LOCK(cs_wallet); // 钱包上锁
        BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet) // 遍历钱包交易映射列表
            item.second.MarkDirty(); // 标记钱包中的每笔交易为已变动
    }
}

bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletDB* pwalletdb)
{
    uint256 hash = wtxIn.GetHash();

    if (fFromLoadWallet)
    {
        mapWallet[hash] = wtxIn;
        CWalletTx& wtx = mapWallet[hash];
        wtx.BindWallet(this);
        wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));
        AddToSpends(hash);
        BOOST_FOREACH(const CTxIn& txin, wtx.vin) {
            if (mapWallet.count(txin.prevout.hash)) {
                CWalletTx& prevtx = mapWallet[txin.prevout.hash];
                if (prevtx.nIndex == -1 && !prevtx.hashUnset()) {
                    MarkConflicted(prevtx.hashBlock, wtx.GetHash());
                }
            }
        }
    }
    else
    {
        LOCK(cs_wallet);
        // Inserts only if not already there, returns tx inserted or tx found
        pair<map<uint256, CWalletTx>::iterator, bool> ret = mapWallet.insert(make_pair(hash, wtxIn));
        CWalletTx& wtx = (*ret.first).second;
        wtx.BindWallet(this);
        bool fInsertedNew = ret.second;
        if (fInsertedNew)
        {
            wtx.nTimeReceived = GetAdjustedTime();
            wtx.nOrderPos = IncOrderPosNext(pwalletdb);
            wtxOrdered.insert(make_pair(wtx.nOrderPos, TxPair(&wtx, (CAccountingEntry*)0)));

            wtx.nTimeSmart = wtx.nTimeReceived;
            if (!wtxIn.hashUnset())
            {
                if (mapBlockIndex.count(wtxIn.hashBlock))
                {
                    int64_t latestNow = wtx.nTimeReceived;
                    int64_t latestEntry = 0;
                    {
                        // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future
                        int64_t latestTolerated = latestNow + 300;
                        const TxItems & txOrdered = wtxOrdered;
                        for (TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)
                        {
                            CWalletTx *const pwtx = (*it).second.first;
                            if (pwtx == &wtx)
                                continue;
                            CAccountingEntry *const pacentry = (*it).second.second;
                            int64_t nSmartTime;
                            if (pwtx)
                            {
                                nSmartTime = pwtx->nTimeSmart;
                                if (!nSmartTime)
                                    nSmartTime = pwtx->nTimeReceived;
                            }
                            else
                                nSmartTime = pacentry->nTime;
                            if (nSmartTime <= latestTolerated)
                            {
                                latestEntry = nSmartTime;
                                if (nSmartTime > latestNow)
                                    latestNow = nSmartTime;
                                break;
                            }
                        }
                    }

                    int64_t blocktime = mapBlockIndex[wtxIn.hashBlock]->GetBlockTime();
                    wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));
                }
                else
                    LogPrintf("AddToWallet(): found %s in block %s not in index\n",
                             wtxIn.GetHash().ToString(),
                             wtxIn.hashBlock.ToString());
            }
            AddToSpends(hash);
        }

        bool fUpdated = false;
        if (!fInsertedNew)
        {
            // Merge
            if (!wtxIn.hashUnset() && wtxIn.hashBlock != wtx.hashBlock)
            {
                wtx.hashBlock = wtxIn.hashBlock;
                fUpdated = true;
            }
            // If no longer abandoned, update
            if (wtxIn.hashBlock.IsNull() && wtx.isAbandoned())
            {
                wtx.hashBlock = wtxIn.hashBlock;
                fUpdated = true;
            }
            if (wtxIn.nIndex != -1 && (wtxIn.nIndex != wtx.nIndex))
            {
                wtx.nIndex = wtxIn.nIndex;
                fUpdated = true;
            }
            if (wtxIn.fFromMe && wtxIn.fFromMe != wtx.fFromMe)
            {
                wtx.fFromMe = wtxIn.fFromMe;
                fUpdated = true;
            }
        }

        //// debug print
        LogPrintf("AddToWallet %s  %s%s\n", wtxIn.GetHash().ToString(), (fInsertedNew ? "new" : ""), (fUpdated ? "update" : ""));

        // Write to disk
        if (fInsertedNew || fUpdated)
            if (!wtx.WriteToDisk(pwalletdb))
                return false;

        // Break debit/credit balance caches:
        wtx.MarkDirty();

        // Notify UI of new or updated transaction
        NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);

        // notify an external script when a wallet transaction comes in or is updated
        std::string strCmd = GetArg("-walletnotify", "");

        if ( !strCmd.empty())
        {
            boost::replace_all(strCmd, "%s", wtxIn.GetHash().GetHex());
            boost::thread t(runCommand, strCmd); // thread runs free
        }

    }
    return true;
}

/**
 * Add a transaction to the wallet, or update it.
 * pblock is optional, but should be provided if the transaction is known to be in a block.
 * If fUpdate is true, existing transactions will be updated.
 */ // 添加一笔交易到钱包，或升级它。pblock 为可选，但如果交易已知在一个区块中，应该提供该值。如果 fUpdate 为 true，现存的交易将被升级。
bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)
{
    {
        AssertLockHeld(cs_wallet);

        if (pblock) { // 如果指定了区块
            BOOST_FOREACH(const CTxIn& txin, tx.vin) { // 遍历交易输入列表
                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);
                while (range.first != range.second) {
                    if (range.first->second != tx.GetHash()) {
                        LogPrintf("Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\n", tx.GetHash().ToString(), pblock->GetHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);
                        MarkConflicted(pblock->GetHash(), range.first->second); // 标记哈希冲突
                    }
                    range.first++;
                }
            }
        }

        bool fExisted = mapWallet.count(tx.GetHash()) != 0;
        if (fExisted && !fUpdate) return false;
        if (fExisted || IsMine(tx) || IsFromMe(tx))
        {
            CWalletTx wtx(this,tx);

            // Get merkle branch if transaction was found in a block
            if (pblock)
                wtx.SetMerkleBranch(*pblock);

            // Do not flush the wallet here for performance reasons
            // this is safe, as in case of a crash, we rescan the necessary blocks on startup through our SetBestChain-mechanism
            CWalletDB walletdb(strWalletFile, "r+", false);

            return AddToWallet(wtx, false, &walletdb);
        }
    }
    return false;
}

bool CWallet::AbandonTransaction(const uint256& hashTx)
{
    LOCK2(cs_main, cs_wallet); // 上锁

    // Do not flush the wallet here for performance reasons
    CWalletDB walletdb(strWalletFile, "r+", false); // 因为性能原因不要在这里刷新钱包

    std::set<uint256> todo; // 待办列表
    std::set<uint256> done; // 已完成列表

    // Can't mark abandoned if confirmed or in mempool // 若已确认或在内存池中的交易则无法标记已抛弃
    assert(mapWallet.count(hashTx)); // 检查交易是否在钱包中
    CWalletTx& origtx = mapWallet[hashTx]; // 获取指定的钱包交易
    if (origtx.GetDepthInMainChain() > 0 || origtx.InMempool()) { // 交易所在区块深度大于 0 （该交易已上链）或该交易在内存池中
        return false;
    }

    todo.insert(hashTx); // 插入待办列表

    while (!todo.empty()) { // 待办列表非空
        uint256 now = *todo.begin(); // 取出待办列表的第一项
        todo.erase(now);
        done.insert(now); // 插入已完成列表
        assert(mapWallet.count(now));
        CWalletTx& wtx = mapWallet[now]; // 获取对应的钱包交易
        int currentconfirm = wtx.GetDepthInMainChain(); // 获取该交易所在区块在链上的深度作为确认数
        // If the orig tx was not in block, none of its spends can be
        assert(currentconfirm <= 0);
        // if (currentconfirm < 0) {Tx and spends are already conflicted, no need to abandon}
        if (currentconfirm == 0 && !wtx.isAbandoned()) { // 当前确认为 0 且钱包交易未标记已抛弃
            // If the orig tx was not in block/mempool, none of its spends can be in mempool // 它的所有花费都不在内存池中
            assert(!wtx.InMempool()); // 钱包交易不在内存池中
            wtx.nIndex = -1;
            wtx.setAbandoned(); // 把钱包交易标记为已抛弃
            wtx.MarkDirty(); // 标记该交易已变动
            wtx.WriteToDisk(&walletdb); // 写入钱包数据库
            NotifyTransactionChanged(this, wtx.GetHash(), CT_UPDATED);
            // Iterate over all its outputs, and mark transactions in the wallet that spend them abandoned too // 遍历它所有的输出，并标记钱包中的交易为已抛弃
            TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(hashTx, 0));
            while (iter != mapTxSpends.end() && iter->first.hash == now) { // 遍历交易花费映射，且全部为该交易的输出
                if (!done.count(iter->second)) { // 对应交易若不在已完成列表
                    todo.insert(iter->second); // 把该交易加入待办列表
                }
                iter++;
            }
            // If a transaction changes 'conflicted' state, that changes the balance // 如果交易改变“冲突”状态，会改变其输出花费的可用余额。
            // available of the outputs it spends. So force those to be recomputed // 所以强制重新计算。
            BOOST_FOREACH(const CTxIn& txin, wtx.vin)
            {
                if (mapWallet.count(txin.prevout.hash)) // 若前一笔交易的在钱包中
                    mapWallet[txin.prevout.hash].MarkDirty(); // 把该交易索引对应的钱包交易标记为已改变
            }
        }
    }

    return true;
}

void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)
{
    LOCK2(cs_main, cs_wallet);

    int conflictconfirms = 0;
    if (mapBlockIndex.count(hashBlock)) {
        CBlockIndex* pindex = mapBlockIndex[hashBlock];
        if (chainActive.Contains(pindex)) {
            conflictconfirms = -(chainActive.Height() - pindex->nHeight + 1);
        }
    }
    // If number of conflict confirms cannot be determined, this means
    // that the block is still unknown or not yet part of the main chain,
    // for example when loading the wallet during a reindex. Do nothing in that
    // case.
    if (conflictconfirms >= 0)
        return;

    // Do not flush the wallet here for performance reasons
    CWalletDB walletdb(strWalletFile, "r+", false);

    std::set<uint256> todo;
    std::set<uint256> done;

    todo.insert(hashTx);

    while (!todo.empty()) {
        uint256 now = *todo.begin();
        todo.erase(now);
        done.insert(now);
        assert(mapWallet.count(now));
        CWalletTx& wtx = mapWallet[now];
        int currentconfirm = wtx.GetDepthInMainChain();
        if (conflictconfirms < currentconfirm) {
            // Block is 'more conflicted' than current confirm; update.
            // Mark transaction as conflicted with this block.
            wtx.nIndex = -1;
            wtx.hashBlock = hashBlock;
            wtx.MarkDirty();
            wtx.WriteToDisk(&walletdb);
            // Iterate over all its outputs, and mark transactions in the wallet that spend them conflicted too
            TxSpends::const_iterator iter = mapTxSpends.lower_bound(COutPoint(now, 0));
            while (iter != mapTxSpends.end() && iter->first.hash == now) {
                 if (!done.count(iter->second)) {
                     todo.insert(iter->second);
                 }
                 iter++;
            }
            // If a transaction changes 'conflicted' state, that changes the balance
            // available of the outputs it spends. So force those to be recomputed
            BOOST_FOREACH(const CTxIn& txin, wtx.vin)
            {
                if (mapWallet.count(txin.prevout.hash))
                    mapWallet[txin.prevout.hash].MarkDirty();
            }
        }
    }
}

void CWallet::SyncTransaction(const CTransaction& tx, const CBlock* pblock)
{
    LOCK2(cs_main, cs_wallet); // 钱包上锁

    if (!AddToWalletIfInvolvingMe(tx, pblock, true)) // 添加该交易到钱包
        return; // Not one of ours

    // If a transaction changes 'conflicted' state, that changes the balance
    // available of the outputs it spends. So force those to be
    // recomputed, also: // 如果交易改变“已冲突”状态，改变其花费输出的可用余额。所以强制重新计算，且：
    BOOST_FOREACH(const CTxIn& txin, tx.vin) // 遍历交易输入列表
    {
        if (mapWallet.count(txin.prevout.hash)) // 若该交易输入的前一笔输出的交易在钱包交易映射列表中
            mapWallet[txin.prevout.hash].MarkDirty(); // 标记该交易已改变
    }
}


isminetype CWallet::IsMine(const CTxIn &txin) const
{
    {
        LOCK(cs_wallet); // 钱包上锁
        map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash); // 在本地钱包中查询前一笔交易输出
        if (mi != mapWallet.end()) // 若找到
        {
            const CWalletTx& prev = (*mi).second; // 获取钱包交易
            if (txin.prevout.n < prev.vout.size()) // 前一笔交易输出序号在范围之内
                return IsMine(prev.vout[txin.prevout.n]); // 验证前一笔交易输出是否属于本地钱包
        }
    }
    return ISMINE_NO; // 0 表示前一笔交易不属于本地钱包
}

CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const
{
    {
        LOCK(cs_wallet);
        map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(txin.prevout.hash);
        if (mi != mapWallet.end())
        {
            const CWalletTx& prev = (*mi).second;
            if (txin.prevout.n < prev.vout.size())
                if (IsMine(prev.vout[txin.prevout.n]) & filter)
                    return prev.vout[txin.prevout.n].nValue;
        }
    }
    return 0;
}

isminetype CWallet::IsMine(const CTxOut& txout) const
{
    return ::IsMine(*this, txout.scriptPubKey); // 检查该交易是否属于我
}

CAmount CWallet::GetCredit(const CTxOut& txout, const isminefilter& filter) const // 4
{
    if (!MoneyRange(txout.nValue)) // 交易输出范围检查
        throw std::runtime_error("CWallet::GetCredit(): value out of range");
    return ((IsMine(txout) & filter) ? txout.nValue : 0); // 若 IsMine 返回 4，则返回交易输出的值
}

bool CWallet::IsChange(const CTxOut& txout) const
{
    // TODO: fix handling of 'change' outputs. The assumption is that any
    // payment to a script that is ours, but is not in the address book
    // is change. That assumption is likely to break when we implement multisignature
    // wallets that return change back into a multi-signature-protected address;
    // a better way of identifying which outputs are 'the send' and which are
    // 'the change' will need to be implemented (maybe extend CWalletTx to remember
    // which output, if any, was change).
    if (::IsMine(*this, txout.scriptPubKey))
    {
        CTxDestination address;
        if (!ExtractDestination(txout.scriptPubKey, address))
            return true;

        LOCK(cs_wallet);
        if (!mapAddressBook.count(address))
            return true;
    }
    return false;
}

CAmount CWallet::GetChange(const CTxOut& txout) const
{
    if (!MoneyRange(txout.nValue))
        throw std::runtime_error("CWallet::GetChange(): value out of range");
    return (IsChange(txout) ? txout.nValue : 0);
}

bool CWallet::IsMine(const CTransaction& tx) const
{
    BOOST_FOREACH(const CTxOut& txout, tx.vout)
        if (IsMine(txout))
            return true;
    return false;
}

bool CWallet::IsFromMe(const CTransaction& tx) const
{
    return (GetDebit(tx, ISMINE_ALL) > 0);
}

CAmount CWallet::GetDebit(const CTransaction& tx, const isminefilter& filter) const
{
    CAmount nDebit = 0;
    BOOST_FOREACH(const CTxIn& txin, tx.vin)
    {
        nDebit += GetDebit(txin, filter);
        if (!MoneyRange(nDebit))
            throw std::runtime_error("CWallet::GetDebit(): value out of range");
    }
    return nDebit;
}

CAmount CWallet::GetCredit(const CTransaction& tx, const isminefilter& filter) const
{
    CAmount nCredit = 0;
    BOOST_FOREACH(const CTxOut& txout, tx.vout)
    {
        nCredit += GetCredit(txout, filter);
        if (!MoneyRange(nCredit))
            throw std::runtime_error("CWallet::GetCredit(): value out of range");
    }
    return nCredit;
}

CAmount CWallet::GetChange(const CTransaction& tx) const
{
    CAmount nChange = 0;
    BOOST_FOREACH(const CTxOut& txout, tx.vout)
    {
        nChange += GetChange(txout);
        if (!MoneyRange(nChange))
            throw std::runtime_error("CWallet::GetChange(): value out of range");
    }
    return nChange;
}

int64_t CWalletTx::GetTxTime() const
{
    int64_t n = nTimeSmart;
    return n ? n : nTimeReceived;
}

int CWalletTx::GetRequestCount() const
{
    // Returns -1 if it wasn't being tracked
    int nRequests = -1;
    {
        LOCK(pwallet->cs_wallet);
        if (IsCoinBase())
        {
            // Generated block
            if (!hashUnset())
            {
                map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);
                if (mi != pwallet->mapRequestCount.end())
                    nRequests = (*mi).second;
            }
        }
        else
        {
            // Did anyone request this transaction?
            map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(GetHash());
            if (mi != pwallet->mapRequestCount.end())
            {
                nRequests = (*mi).second;

                // How about the block it's in?
                if (nRequests == 0 && !hashUnset())
                {
                    map<uint256, int>::const_iterator mi = pwallet->mapRequestCount.find(hashBlock);
                    if (mi != pwallet->mapRequestCount.end())
                        nRequests = (*mi).second;
                    else
                        nRequests = 1; // If it's in someone else's block it must have got out
                }
            }
        }
    }
    return nRequests;
}

void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,
                           list<COutputEntry>& listSent, CAmount& nFee, string& strSentAccount, const isminefilter& filter) const
{
    nFee = 0;
    listReceived.clear();
    listSent.clear();
    strSentAccount = strFromAccount;

    // Compute fee:
    CAmount nDebit = GetDebit(filter);
    if (nDebit > 0) // debit>0 means we signed/sent this transaction
    {
        CAmount nValueOut = GetValueOut();
        nFee = nDebit - nValueOut;
    }

    // Sent/received.
    for (unsigned int i = 0; i < vout.size(); ++i)
    {
        const CTxOut& txout = vout[i];
        isminetype fIsMine = pwallet->IsMine(txout);
        // Only need to handle txouts if AT LEAST one of these is true:
        //   1) they debit from us (sent)
        //   2) the output is to us (received)
        if (nDebit > 0)
        {
            // Don't report 'change' txouts
            if (pwallet->IsChange(txout))
                continue;
        }
        else if (!(fIsMine & filter))
            continue;

        // In either case, we need to get the destination address
        CTxDestination address;

        if (!ExtractDestination(txout.scriptPubKey, address) && !txout.scriptPubKey.IsUnspendable())
        {
            LogPrintf("CWalletTx::GetAmounts: Unknown transaction type found, txid %s\n",
                     this->GetHash().ToString());
            address = CNoDestination();
        }

        COutputEntry output = {address, txout.nValue, (int)i};

        // If we are debited by the transaction, add the output as a "sent" entry
        if (nDebit > 0)
            listSent.push_back(output);

        // If we are receiving the output, add it as a "received" entry
        if (fIsMine & filter)
            listReceived.push_back(output);
    }

}

void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,
                                  CAmount& nSent, CAmount& nFee, const isminefilter& filter) const
{
    nReceived = nSent = nFee = 0;

    CAmount allFee;
    string strSentAccount;
    list<COutputEntry> listReceived;
    list<COutputEntry> listSent;
    GetAmounts(listReceived, listSent, allFee, strSentAccount, filter);

    if (strAccount == strSentAccount)
    {
        BOOST_FOREACH(const COutputEntry& s, listSent)
            nSent += s.amount;
        nFee = allFee;
    }
    {
        LOCK(pwallet->cs_wallet);
        BOOST_FOREACH(const COutputEntry& r, listReceived)
        {
            if (pwallet->mapAddressBook.count(r.destination))
            {
                map<CTxDestination, CAddressBookData>::const_iterator mi = pwallet->mapAddressBook.find(r.destination);
                if (mi != pwallet->mapAddressBook.end() && (*mi).second.name == strAccount)
                    nReceived += r.amount;
            }
            else if (strAccount.empty())
            {
                nReceived += r.amount;
            }
        }
    }
}


bool CWalletTx::WriteToDisk(CWalletDB *pwalletdb)
{
    return pwalletdb->WriteTx(GetHash(), *this);
}

/**
 * Scan the block chain (starting in pindexStart) for transactions
 * from or to us. If fUpdate is true, found transactions that already
 * exist in the wallet will be updated.
 */ // 扫描区块链（从 pindexStart 开始）的交易。如果 fUpdate 为 true，在钱包中已存在的找到的交易将会升级。
int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)
{
    int ret = 0; // 只要升级了一笔，该值就会 +1
    int64_t nNow = GetTime(); // 获取当前时间
    const CChainParams& chainParams = Params(); // 获取链参数

    CBlockIndex* pindex = pindexStart; // 拿到起始区块索引
    {
        LOCK2(cs_main, cs_wallet); // 钱包上锁

        // no need to read and scan block, if block was created before // 如果是在我们的钱包创建之前创建的块，
        // our wallet birthday (as adjusted for block time variability) // 不需要读取和扫描区块信息（根据块时间可变性进行调整）
        while (pindex && nTimeFirstKey && (pindex->GetBlockTime() < (nTimeFirstKey - 7200))) // 若区块时间在钱包创建前 2h
            pindex = chainActive.Next(pindex); // 跳过此区块

        ShowProgress(_("Rescanning..."), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup
        double dProgressStart = Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), pindex, false);
        double dProgressTip = Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), chainActive.Tip(), false);
        while (pindex) // 若该区块存在
        {
            if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0) // 扫描进度
                ShowProgress(_("Rescanning..."), std::max(1, std::min(99, (int)((Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), pindex, false) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));

            CBlock block;
            ReadBlockFromDisk(block, pindex, Params().GetConsensus()); // 从磁盘上读取区块信息
            BOOST_FOREACH(CTransaction& tx, block.vtx) // 遍历区块交易列表
            {
                if (AddToWalletIfInvolvingMe(tx, &block, fUpdate)) // 升级一笔交易
                    ret++;
            }
            pindex = chainActive.Next(pindex); // 指向下一块
            if (GetTime() >= nNow + 60) { // 时间若超过 60s
                nNow = GetTime(); // 更新时间
                LogPrintf("Still rescanning. At block %d. Progress=%f\n", pindex->nHeight, Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), pindex));
            }
        }
        ShowProgress(_("Rescanning..."), 100); // hide progress dialog in GUI
    }
    return ret;
}

void CWallet::ReacceptWalletTransactions()
{
    // If transactions aren't being broadcasted, don't let them into local mempool either
    if (!fBroadcastTransactions) // 如果交易未被广播，也不让它们进入本地交易内存池
        return;
    LOCK2(cs_main, cs_wallet); // 钱包上锁
    std::map<int64_t, CWalletTx*> mapSorted; // 位置与钱包交易映射列表

    // Sort pending wallet transactions based on their initial wallet insertion order // 基于它们初始的钱包交易顺序来排序挂起的钱包交易
    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet) // 遍历钱包交易映射列表
    {
        const uint256& wtxid = item.first; // 获取交易索引
        CWalletTx& wtx = item.second; // 获取钱包交易
        assert(wtx.GetHash() == wtxid); // 验证交易与其索引是否一致

        int nDepth = wtx.GetDepthInMainChain(); // 获取交易在主链中的深度

        if (!wtx.IsCoinBase() && (nDepth == 0 && !wtx.isAbandoned())) { // 该交易不能是 coinbase 且 该交易深度为 0（表示该交易还未被接受）且该交易未被抛弃
            mapSorted.insert(std::make_pair(wtx.nOrderPos, &wtx)); // 加入临时映射列表
        }
    }

    // Try to add wallet transactions to memory pool // 尝试添加钱包交易到内存池
    BOOST_FOREACH(PAIRTYPE(const int64_t, CWalletTx*)& item, mapSorted) // 遍历该列表
    {
        CWalletTx& wtx = *(item.second); // 获取钱包交易

        LOCK(mempool.cs); // 内存池上锁
        wtx.AcceptToMemoryPool(false); // 把交易放入内存池
    }
}

bool CWalletTx::RelayWalletTransaction()
{
    assert(pwallet->GetBroadcastTransactions()); // 验证钱包广播交易是否开启
    if (!IsCoinBase()) // 若该交易非创币交易
    {
        if (GetDepthInMainChain() == 0 && !isAbandoned()) { // 若链深度为 0（即未上链）且 未被标记为已抛弃
            LogPrintf("Relaying wtx %s\n", GetHash().ToString()); // 记录中继交易哈希
            RelayTransaction((CTransaction)*this); // 进行交易中继
            return true;
        }
    }
    return false;
}

set<uint256> CWalletTx::GetConflicts() const
{
    set<uint256> result;
    if (pwallet != NULL)
    {
        uint256 myHash = GetHash();
        result = pwallet->GetConflicts(myHash);
        result.erase(myHash);
    }
    return result;
}

CAmount CWalletTx::GetDebit(const isminefilter& filter) const
{
    if (vin.empty())
        return 0;

    CAmount debit = 0;
    if(filter & ISMINE_SPENDABLE)
    {
        if (fDebitCached)
            debit += nDebitCached;
        else
        {
            nDebitCached = pwallet->GetDebit(*this, ISMINE_SPENDABLE);
            fDebitCached = true;
            debit += nDebitCached;
        }
    }
    if(filter & ISMINE_WATCH_ONLY)
    {
        if(fWatchDebitCached)
            debit += nWatchDebitCached;
        else
        {
            nWatchDebitCached = pwallet->GetDebit(*this, ISMINE_WATCH_ONLY);
            fWatchDebitCached = true;
            debit += nWatchDebitCached;
        }
    }
    return debit;
}

CAmount CWalletTx::GetCredit(const isminefilter& filter) const
{
    // Must wait until coinbase is safely deep enough in the chain before valuing it
    if (IsCoinBase() && GetBlocksToMaturity() > 0)
        return 0;

    int64_t credit = 0;
    if (filter & ISMINE_SPENDABLE)
    {
        // GetBalance can assume transactions in mapWallet won't change
        if (fCreditCached)
            credit += nCreditCached;
        else
        {
            nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);
            fCreditCached = true;
            credit += nCreditCached;
        }
    }
    if (filter & ISMINE_WATCH_ONLY)
    {
        if (fWatchCreditCached)
            credit += nWatchCreditCached;
        else
        {
            nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);
            fWatchCreditCached = true;
            credit += nWatchCreditCached;
        }
    }
    return credit;
}

CAmount CWalletTx::GetImmatureCredit(bool fUseCache) const
{
    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())
    {
        if (fUseCache && fImmatureCreditCached)
            return nImmatureCreditCached;
        nImmatureCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);
        fImmatureCreditCached = true;
        return nImmatureCreditCached;
    }

    return 0;
}

CAmount CWalletTx::GetAvailableCredit(bool fUseCache) const
{
    if (pwallet == 0) // 钱包不可用
        return 0;

    // Must wait until coinbase is safely deep enough in the chain before valuing it
    if (IsCoinBase() && GetBlocksToMaturity() > 0) // 若为创币交易，必须要成熟
        return 0;

    if (fUseCache && fAvailableCreditCached) // 若使用缓存 且 已缓存
        return nAvailableCreditCached; // 直接返回缓存金额

    CAmount nCredit = 0;
    uint256 hashTx = GetHash(); // 获取本交易哈希
    for (unsigned int i = 0; i < vout.size(); i++) // 遍历交易输出列表
    {
        if (!pwallet->IsSpent(hashTx, i)) // 若该交易输出未花费
        {
            const CTxOut &txout = vout[i]; // 获取该交易输出
            nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE); // 累加交易输出金额
            if (!MoneyRange(nCredit)) // 总余额范围检查
                throw std::runtime_error("CWalletTx::GetAvailableCredit() : value out of range");
        }
    }

    nAvailableCreditCached = nCredit; // 进行缓存
    fAvailableCreditCached = true; // 缓存标志
    return nCredit; // 返回余额
}

CAmount CWalletTx::GetImmatureWatchOnlyCredit(const bool& fUseCache) const
{
    if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())
    {
        if (fUseCache && fImmatureWatchCreditCached)
            return nImmatureWatchCreditCached;
        nImmatureWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);
        fImmatureWatchCreditCached = true;
        return nImmatureWatchCreditCached;
    }

    return 0;
}

CAmount CWalletTx::GetAvailableWatchOnlyCredit(const bool& fUseCache) const
{
    if (pwallet == 0)
        return 0;

    // Must wait until coinbase is safely deep enough in the chain before valuing it
    if (IsCoinBase() && GetBlocksToMaturity() > 0)
        return 0;

    if (fUseCache && fAvailableWatchCreditCached)
        return nAvailableWatchCreditCached;

    CAmount nCredit = 0;
    for (unsigned int i = 0; i < vout.size(); i++)
    {
        if (!pwallet->IsSpent(GetHash(), i))
        {
            const CTxOut &txout = vout[i];
            nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);
            if (!MoneyRange(nCredit))
                throw std::runtime_error("CWalletTx::GetAvailableCredit() : value out of range");
        }
    }

    nAvailableWatchCreditCached = nCredit;
    fAvailableWatchCreditCached = true;
    return nCredit;
}

CAmount CWalletTx::GetChange() const
{
    if (fChangeCached)
        return nChangeCached;
    nChangeCached = pwallet->GetChange(*this);
    fChangeCached = true;
    return nChangeCached;
}

bool CWalletTx::InMempool() const
{
    LOCK(mempool.cs);
    if (mempool.exists(GetHash())) { // 若该交易索引是否存在于内存池中
        return true; // 返回 true
    }
    return false;
}

bool CWalletTx::IsTrusted() const
{
    // Quick answer in most cases
    if (!CheckFinalTx(*this))
        return false;
    int nDepth = GetDepthInMainChain();
    if (nDepth >= 1)
        return true;
    if (nDepth < 0)
        return false;
    if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit
        return false;

    // Don't trust unconfirmed transactions from us unless they are in the mempool.
    if (!InMempool())
        return false;

    // Trusted if all inputs are from us and are in the mempool:
    BOOST_FOREACH(const CTxIn& txin, vin)
    {
        // Transactions not sent by us: not trusted
        const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);
        if (parent == NULL)
            return false;
        const CTxOut& parentOut = parent->vout[txin.prevout.n];
        if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)
            return false;
    }
    return true;
}

bool CWalletTx::IsEquivalentTo(const CWalletTx& tx) const
{
        CMutableTransaction tx1 = *this;
        CMutableTransaction tx2 = tx;
        for (unsigned int i = 0; i < tx1.vin.size(); i++) tx1.vin[i].scriptSig = CScript();
        for (unsigned int i = 0; i < tx2.vin.size(); i++) tx2.vin[i].scriptSig = CScript();
        return CTransaction(tx1) == CTransaction(tx2);
}

std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime)
{
    std::vector<uint256> result; // 交易索引列表

    LOCK(cs_wallet); // 钱包上锁
    // Sort them in chronological order // 按时间顺序排序
    multimap<unsigned int, CWalletTx*> mapSorted; // 排过序的交易列表
    BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet) // 遍历钱包交易映射列表
    {
        CWalletTx& wtx = item.second; // 获取钱包交易
        // Don't rebroadcast if newer than nTime: // 指定时间点后的交易不再广播
        if (wtx.nTimeReceived > nTime)
            continue;
        mapSorted.insert(make_pair(wtx.nTimeReceived, &wtx)); // 加入排过序的交易列表
    }
    BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted) // 遍历该交易列表
    {
        CWalletTx& wtx = *item.second; // 获取交易
        if (wtx.RelayWalletTransaction()) // 中继该钱包交易
            result.push_back(wtx.GetHash()); // 获取交易哈希加入交易索引列表
    }
    return result; // 返回发送的交易索引列表
}

void CWallet::ResendWalletTransactions(int64_t nBestBlockTime)
{
    // Do this infrequently and randomly to avoid giving away
    // that these are our transactions. // 不常和随机做这个，避免放弃我们的交易。
    if (GetTime() < nNextResend || !fBroadcastTransactions)
        return;
    bool fFirst = (nNextResend == 0);
    nNextResend = GetTime() + GetRand(30 * 60);
    if (fFirst)
        return;

    // Only do it if there's been a new block since last time // 若有一个新区块才执行这里
    if (nBestBlockTime < nLastResend)
        return;
    nLastResend = GetTime();

    // Rebroadcast unconfirmed txes older than 5 minutes before the last
    // block was found: // 在找到最后一个块前的 5 分钟前广播未确认的交易集
    std::vector<uint256> relayed = ResendWalletTransactionsBefore(nBestBlockTime-5*60);
    if (!relayed.empty()) // 若中继数据（交易）非空，记录再广播的交易数
        LogPrintf("%s: rebroadcast %u unconfirmed transactions\n", __func__, relayed.size());
}

/** @} */ // end of mapWallet




/** @defgroup Actions
 *
 * @{
 */


CAmount CWallet::GetBalance() const
{
    CAmount nTotal = 0;
    {
        LOCK2(cs_main, cs_wallet); // 钱包上锁
        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)
        { // 遍历钱包映射
            const CWalletTx* pcoin = &(*it).second; // 获取钱包交易
            if (pcoin->IsTrusted()) // 该交易可信（已确认）
                nTotal += pcoin->GetAvailableCredit(); // 获取可用余额并累加
        }
    }

    return nTotal; // 返回总余额
}

CAmount CWallet::GetUnconfirmedBalance() const
{
    CAmount nTotal = 0;
    {
        LOCK2(cs_main, cs_wallet);
        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)
        { // 遍历钱包交易映射列表
            const CWalletTx* pcoin = &(*it).second; // 获取钱包交易
            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool()) // 该交易不可信（未确认） 且 交易所在链深度为 0 且 交易在内存池中（未上链）
                nTotal += pcoin->GetAvailableCredit(); // 获取累加可用余额
        }
    }
    return nTotal; // 返回总余额
}

CAmount CWallet::GetImmatureBalance() const
{
    CAmount nTotal = 0;
    {
        LOCK2(cs_main, cs_wallet);
        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)
        {
            const CWalletTx* pcoin = &(*it).second;
            nTotal += pcoin->GetImmatureCredit();
        }
    }
    return nTotal;
}

CAmount CWallet::GetWatchOnlyBalance() const
{
    CAmount nTotal = 0;
    {
        LOCK2(cs_main, cs_wallet);
        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)
        {
            const CWalletTx* pcoin = &(*it).second;
            if (pcoin->IsTrusted())
                nTotal += pcoin->GetAvailableWatchOnlyCredit();
        }
    }

    return nTotal;
}

CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const
{
    CAmount nTotal = 0;
    {
        LOCK2(cs_main, cs_wallet);
        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)
        {
            const CWalletTx* pcoin = &(*it).second;
            if (!pcoin->IsTrusted() && pcoin->GetDepthInMainChain() == 0 && pcoin->InMempool())
                nTotal += pcoin->GetAvailableWatchOnlyCredit();
        }
    }
    return nTotal;
}

CAmount CWallet::GetImmatureWatchOnlyBalance() const
{
    CAmount nTotal = 0;
    {
        LOCK2(cs_main, cs_wallet);
        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)
        {
            const CWalletTx* pcoin = &(*it).second;
            nTotal += pcoin->GetImmatureWatchOnlyCredit();
        }
    }
    return nTotal;
}

void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl, bool fIncludeZeroValue) const
{
    vCoins.clear(); // 先清空币输出列表

    {
        LOCK2(cs_main, cs_wallet); // 钱包上锁
        for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)
        { // 遍历钱包交易映射列表
            const uint256& wtxid = it->first; // 获取钱包交易索引
            const CWalletTx* pcoin = &(*it).second; // 获取钱包交易

            if (!CheckFinalTx(*pcoin)) // 非最终交易
                continue; // 跳过

            if (fOnlyConfirmed && !pcoin->IsTrusted()) // 若交易需要确认 且 不可信
                continue; // 跳过

            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0) // 若交易为创币交易 且 未成熟
                continue; // 跳过

            int nDepth = pcoin->GetDepthInMainChain(); // 获取交易深度
            if (nDepth < 0) // 深度小于 0 表示未上链
                continue; // 跳过

            // We should not consider coins which aren't at least in our mempool // 我们不应该考虑不在内存池的交易
            // It's possible for these to be conflicted via ancestors which we may never be able to detect // 这些可能会通过我们无法侦测到的祖先发生冲突
            if (nDepth == 0 && !pcoin->InMempool()) // 交易未上链 且 不在内存池中
                continue; // 跳过

            for (unsigned int i = 0; i < pcoin->vout.size(); i++) { // 遍历交易输出列表
                isminetype mine = IsMine(pcoin->vout[i]); // 判断该输出是否属于自己
                if (!(IsSpent(wtxid, i)) && mine != ISMINE_NO && // 输出未花费 且 属于自己 且
                    !IsLockedCoin((*it).first, i) && (pcoin->vout[i].nValue > 0 || fIncludeZeroValue) && // 不是锁定的币 且 （输出金额大于 0 或 包含 0 值标志为 true） 且
                    (!coinControl || !coinControl->HasSelected() || coinControl->fAllowOtherInputs || coinControl->IsSelected((*it).first, i)))
                        vCoins.push_back(COutput(pcoin, i, nDepth,
                                                 ((mine & ISMINE_SPENDABLE) != ISMINE_NO) ||
                                                  (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO))); // 加入币输出列表
            }
        }
    }
}

static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,unsigned int> > >vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,
                                  vector<char>& vfBest, CAmount& nBest, int iterations = 1000)
{
    vector<char> vfIncluded;

    vfBest.assign(vValue.size(), true);
    nBest = nTotalLower;

    seed_insecure_rand();

    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)
    {
        vfIncluded.assign(vValue.size(), false);
        CAmount nTotal = 0;
        bool fReachedTarget = false;
        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)
        {
            for (unsigned int i = 0; i < vValue.size(); i++)
            {
                //The solver here uses a randomized algorithm,
                //the randomness serves no real security purpose but is just
                //needed to prevent degenerate behavior and it is important
                //that the rng is fast. We do not use a constant random sequence,
                //because there may be some privacy improvement by making
                //the selection random.
                if (nPass == 0 ? insecure_rand()&1 : !vfIncluded[i])
                {
                    nTotal += vValue[i].first;
                    vfIncluded[i] = true;
                    if (nTotal >= nTargetValue)
                    {
                        fReachedTarget = true;
                        if (nTotal < nBest)
                        {
                            nBest = nTotal;
                            vfBest = vfIncluded;
                        }
                        nTotal -= vValue[i].first;
                        vfIncluded[i] = false;
                    }
                }
            }
        }
    }

    //Reduces the approximate best subset by removing any inputs that are smaller than the surplus of nTotal beyond nTargetValue. 
    for (unsigned int i = 0; i < vValue.size(); i++)
    {                        
        if (vfBest[i] && (nBest - vValue[i].first) >= nTargetValue )
        {
            vfBest[i] = false;
            nBest -= vValue[i].first;
        }
    }
}

bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,
                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const
{
    setCoinsRet.clear();
    nValueRet = 0;

    // List of values less than target
    pair<CAmount, pair<const CWalletTx*,unsigned int> > coinLowestLarger;
    coinLowestLarger.first = std::numeric_limits<CAmount>::max();
    coinLowestLarger.second.first = NULL;
    vector<pair<CAmount, pair<const CWalletTx*,unsigned int> > > vValue;
    CAmount nTotalLower = 0;

    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);

    BOOST_FOREACH(const COutput &output, vCoins)
    {
        if (!output.fSpendable)
            continue;

        const CWalletTx *pcoin = output.tx;

        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))
            continue;

        int i = output.i;
        CAmount n = pcoin->vout[i].nValue;

        pair<CAmount,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));

        if (n == nTargetValue)
        {
            setCoinsRet.insert(coin.second);
            nValueRet += coin.first;
            return true;
        }
        else if (n < nTargetValue + MIN_CHANGE)
        {
            vValue.push_back(coin);
            nTotalLower += n;
        }
        else if (n < coinLowestLarger.first)
        {
            coinLowestLarger = coin;
        }
    }

    if (nTotalLower == nTargetValue)
    {
        for (unsigned int i = 0; i < vValue.size(); ++i)
        {
            setCoinsRet.insert(vValue[i].second);
            nValueRet += vValue[i].first;
        }
        return true;
    }

    if (nTotalLower < nTargetValue)
    {
        if (coinLowestLarger.second.first == NULL)
            return false;
        setCoinsRet.insert(coinLowestLarger.second);
        nValueRet += coinLowestLarger.first;
        return true;
    }

    // Solve subset sum by stochastic approximation
    sort(vValue.rbegin(), vValue.rend(), CompareValueOnly());
    vector<char> vfBest;
    CAmount nBest;

    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);
    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)
        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);

    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,
    //                                   or the next bigger coin is closer), return the bigger coin
    if (coinLowestLarger.second.first &&
        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.first <= nBest))
    {
        setCoinsRet.insert(coinLowestLarger.second);
        nValueRet += coinLowestLarger.first;
    }
    else {
        for (unsigned int i = 0; i < vValue.size(); i++)
            if (vfBest[i])
            {
                setCoinsRet.insert(vValue[i].second);
                nValueRet += vValue[i].first;
            }

        LogPrint("selectcoins", "SelectCoins() best subset: ");
        for (unsigned int i = 0; i < vValue.size(); i++)
            if (vfBest[i])
                LogPrint("selectcoins", "%s ", FormatMoney(vValue[i].first));
        LogPrint("selectcoins", "total %s\n", FormatMoney(nBest));
    }

    return true;
}

bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const
{
    vector<COutput> vCoins; // 币输出列表
    AvailableCoins(vCoins, true, coinControl); // 获取可用的币的输出列表

    // coin control -> return all selected outputs (we want all selected to go into the transaction for sure) // 返回全部选定的输出（我们希望所有选中的都进入交易）
    if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs)
    {
        BOOST_FOREACH(const COutput& out, vCoins) // 遍历输出列表
        {
            if (!out.fSpendable) // 若该输出不可花费
                 continue; // 跳过
            nValueRet += out.tx->vout[out.i].nValue; // 累加输出交易输出的值
            setCoinsRet.insert(make_pair(out.tx, out.i)); // 把交易和输出索引插入币集合
        }
        return (nValueRet >= nTargetValue); // 若总和比目标值大，返回 true
    }

    // calculate value from preset inputs and store them // 计算预设输入的值并存储它们
    set<pair<const CWalletTx*, uint32_t> > setPresetCoins; // 预设币集合
    CAmount nValueFromPresetInputs = 0; // 来自预设输入的值

    std::vector<COutPoint> vPresetInputs; // 预设输入列表
    if (coinControl)
        coinControl->ListSelected(vPresetInputs);
    BOOST_FOREACH(const COutPoint& outpoint, vPresetInputs)
    {
        map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);
        if (it != mapWallet.end())
        {
            const CWalletTx* pcoin = &it->second;
            // Clearly invalid input, fail
            if (pcoin->vout.size() <= outpoint.n)
                return false;
            nValueFromPresetInputs += pcoin->vout[outpoint.n].nValue;
            setPresetCoins.insert(make_pair(pcoin, outpoint.n));
        } else
            return false; // TODO: Allow non-wallet inputs
    }

    // remove preset inputs from vCoins
    for (vector<COutput>::iterator it = vCoins.begin(); it != vCoins.end() && coinControl && coinControl->HasSelected();)
    {
        if (setPresetCoins.count(make_pair(it->tx, it->i)))
            it = vCoins.erase(it);
        else
            ++it;
    }

    bool res = nTargetValue <= nValueFromPresetInputs ||
        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, vCoins, setCoinsRet, nValueRet) ||
        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 1, vCoins, setCoinsRet, nValueRet) ||
        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, vCoins, setCoinsRet, nValueRet));

    // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset
    setCoinsRet.insert(setPresetCoins.begin(), setPresetCoins.end());

    // add preset inputs to the total value selected
    nValueRet += nValueFromPresetInputs;

    return res;
}

bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount &nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching)
{
    vector<CRecipient> vecSend; // 1.发送列表

    // Turn the txout set into a CRecipient vector // 把交易输出集转换为发送（接收者）列表
    BOOST_FOREACH(const CTxOut& txOut, tx.vout) // 遍历交易输出列表
    {
        CRecipient recipient = {txOut.scriptPubKey, txOut.nValue, false}; // 初始化接收者对象
        vecSend.push_back(recipient); // 加入发送列表
    }

    CCoinControl coinControl;
    coinControl.fAllowOtherInputs = true;
    coinControl.fAllowWatchOnly = includeWatching;
    BOOST_FOREACH(const CTxIn& txin, tx.vin) // 2.遍历交易输入列表
        coinControl.Select(txin.prevout); // 把输入的前一笔交易输出加入币选择集合

    CReserveKey reservekey(this);
    CWalletTx wtx; // 创建一笔钱包交易
    if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosRet, strFailReason, &coinControl, false)) // 3.创建交易
        return false;

    if (nChangePosRet != -1) // 4.若找零输出位置（序号）不等于 -1，表示有位置
        tx.vout.insert(tx.vout.begin() + nChangePosRet, wtx.vout[nChangePosRet]); // 插入原交易输出列表的指定位置

    // Add new txins (keeping original txin scriptSig/order) // 5.添加新的交易输入列表（保留原始交易输入脚本签名/顺序）
    BOOST_FOREACH(const CTxIn& txin, wtx.vin) // 遍历新的钱包交易输入列表
    {
        bool found = false;
        BOOST_FOREACH(const CTxIn& origTxIn, tx.vin) // 遍历旧的交易输入列表
        {
            if (txin.prevout.hash == origTxIn.prevout.hash && txin.prevout.n == origTxIn.prevout.n) // 若是重复输入（相同的上一笔交易哈希和输出序号）
            {
                found = true;
                break;
            }
        }
        if (!found) // 若未找到该输入
            tx.vin.push_back(txin); // 把该输入加入原交易的输入列表
    }

    return true; // 成功返回 true
}

bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,
                                int& nChangePosRet, std::string& strFailReason, const CCoinControl* coinControl, bool sign)
{
    CAmount nValue = 0; // 1.记录发送的总金额
    unsigned int nSubtractFeeFromAmount = 0; // 从发送金额减去的总交易费
    BOOST_FOREACH (const CRecipient& recipient, vecSend) // 遍历发送列表
    {
        if (nValue < 0 || recipient.nAmount < 0) // 发送金额为负数
        {
            strFailReason = _("Transaction amounts must be positive"); // 创建交易失败
            return false;
        }
        nValue += recipient.nAmount; // 累加发送金额

        if (recipient.fSubtractFeeFromAmount) // 若从金额中减去交易费
            nSubtractFeeFromAmount++; // 减去交易费累加
    }
    if (vecSend.empty() || nValue < 0) // 发送列表为空 或 发送的总金额为负数
    {
        strFailReason = _("Transaction amounts must be positive"); // 创建交易失败
        return false;
    }

    wtxNew.fTimeReceivedIsTxTime = true; // 接收时间是交易时间标志置为 true
    wtxNew.BindWallet(this); // 交易绑定当前钱包
    CMutableTransaction txNew; // 易变的交易对象

    // Discourage fee sniping. // 阻止交易费用。
    //
    // For a large miner the value of the transactions in the best block and
    // the mempool can exceed the cost of deliberately attempting to mine two
    // blocks to orphan the current best block. By setting nLockTime such that
    // only the next block can include the transaction, we discourage this
    // practice as the height restricted and limited blocksize gives miners
    // considering fee sniping fewer options for pulling off this attack.
    //
    // A simple way to think about this is from the wallet's point of view we
    // always want the blockchain to move forward. By setting nLockTime this
    // way we're basically making the statement that we only want this
    // transaction to appear in the next block; we don't want to potentially
    // encourage reorgs by allowing transactions to appear at lower heights
    // than the next block in forks of the best chain.
    //
    // Of course, the subsidy is high enough, and transaction volume low
    // enough, that fee sniping isn't a problem yet, but by implementing a fix
    // now we ensure code won't be written that makes assumptions about
    // nLockTime that preclude a fix later.
    txNew.nLockTime = chainActive.Height(); // 获取激活的链高度作为该交易的锁定时间

    // Secondly occasionally randomly pick a nLockTime even further back, so
    // that transactions that are delayed after signing for whatever reason,
    // e.g. high-latency mix networks and some CoinJoin implementations, have
    // better privacy. // 其次偶尔会随机选择一个锁定时间，处于任何原因在签名后延迟的交易。
    if (GetRandInt(10) == 0) // 若随机数为 0
        txNew.nLockTime = std::max(0, (int)txNew.nLockTime - GetRandInt(100)); // 使用一个相对随机时间作为锁定时间

    assert(txNew.nLockTime <= (unsigned int)chainActive.Height()); // 锁定时间必须小于等于当前激活的链高度
    assert(txNew.nLockTime < LOCKTIME_THRESHOLD); // 锁定时间必须小于其阈值

    {
        LOCK2(cs_main, cs_wallet); // 钱包上锁
        {
            nFeeRet = 0;
            // Start with no fee and loop until there is enough fee // 开始时没有交易费，循环直到有足够的交易费
            while (true)
            {
                txNew.vin.clear(); // 清空交易输入列表
                txNew.vout.clear(); // 清空交易输出列表
                wtxNew.fFromMe = true; // 标记为自己发出的交易
                nChangePosRet = -1;
                bool fFirst = true; // 第一次循环标志

                CAmount nValueToSelect = nValue; // 要发送的总金额
                if (nSubtractFeeFromAmount == 0) // 若不需要从金额中减去交易费
                    nValueToSelect += nFeeRet; // 发送的金额加上交易费
                double dPriority = 0; // 优先级
                // vouts to the payees // 输出到收款人
                BOOST_FOREACH (const CRecipient& recipient, vecSend) // 3.遍历发送列表
                {
                    CTxOut txout(recipient.nAmount, recipient.scriptPubKey); // 构造交易输出对象

                    if (recipient.fSubtractFeeFromAmount) // 若从金额中减去交易费
                    {
                        txout.nValue -= nFeeRet / nSubtractFeeFromAmount; // Subtract fee equally from each selected recipient // 减去平均要减去的交易费（本笔交易 / 总共要减去的交易费）

                        if (fFirst) // first receiver pays the remainder not divisible by output count
                        { // 若是第一次循环
                            fFirst = false; // 首次循环标志置为 false
                            txout.nValue -= nFeeRet % nSubtractFeeFromAmount; // 输出金额再减去多出来的部分
                        }
                    }

                    if (txout.IsDust(::minRelayTxFee)) // 根据最小中继交易费判断该交易是否为粉尘交易
                    {
                        if (recipient.fSubtractFeeFromAmount && nFeeRet > 0) // 若需减去交易费 且 交易费大于 0
                        {
                            if (txout.nValue < 0) // 若交易输出的金额为负数
                                strFailReason = _("The transaction amount is too small to pay the fee");
                            else
                                strFailReason = _("The transaction amount is too small to send after the fee has been deducted");
                        }
                        else
                            strFailReason = _("Transaction amount too small");
                        return false; // 创建交易失败
                    } // 非粉尘交易
                    txNew.vout.push_back(txout); // 加入交易输出列表
                }

                // Choose coins to use // 4.选择要使用的币
                set<pair<const CWalletTx*,unsigned int> > setCoins; // 硬币集合
                CAmount nValueIn = 0; // 记录选择的硬币总金额
                if (!SelectCoins(nValueToSelect, setCoins, nValueIn, coinControl)) // 选择硬币
                {
                    strFailReason = _("Insufficient funds");
                    return false; // 创建交易失败
                }
                BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins) // 5.遍历硬币集合
                {
                    CAmount nCredit = pcoin.first->vout[pcoin.second].nValue; // 获取钱包交易输出金额
                    //The coin age after the next block (depth+1) is used instead of the current, // 使用下一个块（深度+1）之后的币龄代替当前，
                    //reflecting an assumption the user would accept a bit more delay for
                    //a chance at a free transaction. // 反应了用户会在免费交易中更多延迟以获得机会的假设。
                    //But mempool inputs might still be in the mempool, so their age stays 0 // 但内存池输入可能仍然在内存池中，所以它们的币龄为 0
                    int age = pcoin.first->GetDepthInMainChain(); // 获取交易深度作为币龄
                    assert(age >= 0); // 检测币龄
                    if (age != 0)
                        age += 1;
                    dPriority += (double)nCredit * age; // 币龄和币数量用于计算优先级
                }

                const CAmount nChange = nValueIn - nValueToSelect; // 6.找零
                if (nChange > 0) // 大于 0 表示存在找零
                {
                    // Fill a vout to ourself // 填充一个输出列表到我们自己
                    // TODO: pass in scriptChange instead of reservekey so // TODO：传递找零脚本而非 reservekey
                    // change transaction isn't always pay-to-bitcoin-address // 所以找零交易不总是 P2PKH
                    CScript scriptChange; // 创建一个找零脚本

                    // coin control: send change to custom address // 币控制：发送找零到指定地址
                    if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))
                        scriptChange = GetScriptForDestination(coinControl->destChange); // 从找零地址获取找零脚本

                    // no coin control: send change to newly generated address
                    else // 非币控制：发送找零到新生成的地址
                    {
                        // Note: We use a new key here to keep it from being obvious which side is the change.
                        //  The drawback is that by not reusing a previous key, the change may be lost if a
                        //  backup is restored, if the backup doesn't have the new private key for the change.
                        //  If we reused the old key, it would be possible to add code to look for and
                        //  rediscover unknown transactions that were written with keys of ours to recover
                        //  post-backup change.

                        // Reserve a new key pair from key pool // 从密钥池拿一个密钥对
                        CPubKey vchPubKey;
                        bool ret;
                        ret = reservekey.GetReservedKey(vchPubKey); // 从密钥池获取一个公钥
                        assert(ret); // should never fail, as we just unlocked // 应该不会失败，因为我们刚解锁

                        scriptChange = GetScriptForDestination(vchPubKey.GetID()); // 根据公钥索引获取找零脚本
                    }

                    CTxOut newTxOut(nChange, scriptChange); // 通过找零金额和脚本创建一笔新的交易输出

                    // We do not move dust-change to fees, because the sender would end up paying more than requested. // 我们不会把粉尘找零转到交易费，因为发送者最终会支付超过请求的费用。
                    // This would be against the purpose of the all-inclusive feature. // 这将违背包含全部功能的目的。
                    // So instead we raise the change and deduct from the recipient. // 所以我们提高找零并减少接收者金额。
                    if (nSubtractFeeFromAmount > 0 && newTxOut.IsDust(::minRelayTxFee)) // 从金额中减去的交易费大于 0 且 新交易输出是粉尘交易（通过最小中继交易费判断）
                    {
                        CAmount nDust = newTxOut.GetDustThreshold(::minRelayTxFee) - newTxOut.nValue; // 计算粉尘金额
                        newTxOut.nValue += nDust; // raise change until no more dust // 增加找零直到没有粉尘
                        for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient // 从第一个接收者中减去
                        { // 遍历发送列表
                            if (vecSend[i].fSubtractFeeFromAmount)
                            {
                                txNew.vout[i].nValue -= nDust; // 减去粉尘
                                if (txNew.vout[i].IsDust(::minRelayTxFee)) // 若交易输出是粉尘
                                {
                                    strFailReason = _("The transaction amount is too small to send after the fee has been deducted");
                                    return false; // 创建交易失败
                                }
                                break; // 只改变第一个，所以跳出
                            }
                        }
                    }

                    // Never create dust outputs; if we would, just
                    // add the dust to the fee. // 从不创建粉尘输出；如果我们想，只添加粉尘到交易费
                    if (newTxOut.IsDust(::minRelayTxFee)) // 新的交易输出是粉尘
                    {
                        nFeeRet += nChange; // 增加找零到交易费
                        reservekey.ReturnKey(); // 把找零地址对应密钥放回密钥池
                    }
                    else
                    { // 输出不是粉尘
                        // Insert change txn at random position:
                        nChangePosRet = GetRandInt(txNew.vout.size()+1); // 获取一个随机位置
                        vector<CTxOut>::iterator position = txNew.vout.begin()+nChangePosRet;
                        txNew.vout.insert(position, newTxOut); // 插入找零交易到交易输出列表的随机位置
                    }
                } // 否则不存在找零
                else
                    reservekey.ReturnKey(); // 把密钥放回密钥池

                // Fill vin // 7.填充输入列表
                //
                // Note how the sequence number is set to max()-1 so that the
                // nLockTime set above actually works. // 注：序号如何设置到 max()-1 以至上面设置的锁定时间实际工作。
                BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins) // 遍历币集合
                    txNew.vin.push_back(CTxIn(coin.first->GetHash(),coin.second,CScript(), // 加入交易输入列表
                                              std::numeric_limits<unsigned int>::max()-1));

                // Sign // 8.签名
                int nIn = 0; // 输入索引
                CTransaction txNewConst(txNew); // 通过易变的交易构建一笔不变的交易
                BOOST_FOREACH(const PAIRTYPE(const CWalletTx*,unsigned int)& coin, setCoins) // 遍历币集合
                {
                    bool signSuccess; // 签名状态
                    const CScript& scriptPubKey = coin.first->vout[coin.second].scriptPubKey; // 获取脚本公钥
                    CScript& scriptSigRes = txNew.vin[nIn].scriptSig; // 获取脚本签名的引用
                    if (sign) // true 进行签名
                        signSuccess = ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, scriptSigRes); // 进行签名
                    else
                        signSuccess = ProduceSignature(DummySignatureCreator(this), scriptPubKey, scriptSigRes);

                    if (!signSuccess) // 签名失败
                    {
                        strFailReason = _("Signing transaction failed");
                        return false;
                    }
                    nIn++; // 交易输入序号加 1
                }

                unsigned int nBytes = ::GetSerializeSize(txNew, SER_NETWORK, PROTOCOL_VERSION); // 获取序列化后交易的字节数

                // Remove scriptSigs if we used dummy signatures for fee calculation
                if (!sign) { // 如果我们使用虚拟签名进行计费，则移除脚本签名
                    BOOST_FOREACH (CTxIn& vin, txNew.vin) // 遍历交易输入列表
                        vin.scriptSig = CScript(); // 创建空脚本
                }

                // Embed the constructed transaction data in wtxNew. // 9.把构造的交易嵌入到 txNew
                *static_cast<CTransaction*>(&wtxNew) = CTransaction(txNew);

                // Limit size // 限制交易大小
                if (nBytes >= MAX_STANDARD_TX_SIZE) // 序列化的交易大小必须小于交易大小上限
                {
                    strFailReason = _("Transaction too large");
                    return false; // 创建交易失败
                }

                dPriority = wtxNew.ComputePriority(dPriority, nBytes); // 计算交易优先级

                // Can we complete this as a free transaction? // 我们可以把它作为免费交易来完成吗？
                if (fSendFreeTransactions && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE) // 若免费发送 且 交易大小小于等于免费交易阈值
                {
                    // Not enough fee: enough priority? // 没有足够的交易费：足够的优先级？
                    double dPriorityNeeded = mempool.estimateSmartPriority(nTxConfirmTarget); // 智能估计优先级
                    // Require at least hard-coded AllowFree. // 至少需要硬编的 AllowFree
                    if (dPriority >= dPriorityNeeded && AllowFree(dPriority))
                        break;
                }

                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool); // 获取所需最小交易费
                if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {
                    nFeeNeeded = coinControl->nMinimumTotalFee;
                }

                // If we made it here and we aren't even able to meet the relay fee on the next pass, give up // 如果我们做到这里，且我们无法满足下次的中继交易费，放弃
                // because we must be at the maximum allowed fee. // 因为我们必须达到允许的最大费用（最小中继费）。
                if (nFeeNeeded < ::minRelayTxFee.GetFee(nBytes)) // 若所需交易费小于最小中继交易费
                {
                    strFailReason = _("Transaction too large for fee policy");
                    return false; // 创建交易失败
                }

                if (nFeeRet >= nFeeNeeded) // 当前交易费等于所需交易费时
                    break; // Done, enough fee included. // 完成，跳出

                // Include more fee and try again.
                nFeeRet = nFeeNeeded; // 设置交易费
                continue; // while
            }
        }
    }

    return true; // 创建成功，返回 true
}

/**
 * Call after CreateTransaction unless you want to abort
 */ // 除非你想要崩溃，在 CreateTransaction 之后调用
bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)
{
    {
        LOCK2(cs_main, cs_wallet); // 1.钱包上锁
        LogPrintf("CommitTransaction:\n%s", wtxNew.ToString()); // 记录交易信息
        {
            // This is only to keep the database open to defeat the auto-flush for the // 这只是为了在该期间内保持数据库打开以防自动刷新。
            // duration of this scope.  This is the only place where this optimization // 这是唯一这种优化可能有意义的地方。
            // maybe makes sense; please don't do it anywhere else. // 请不要在其他地方做这个。
            CWalletDB* pwalletdb = fFileBacked ? new CWalletDB(strWalletFile,"r+") : NULL; // 创建钱包数据库对象，r+ 表示可读写方式打开钱包数据库文件

            // Take key pair from key pool so it won't be used again // 从密钥池中拿出密钥对，以至它无法再次被使用
            reservekey.KeepKey(); // 从密钥池中移除该密钥

            // Add tx to wallet, because if it has change it's also ours, // 添加交易到钱包，因为如果它有找零也是我们的，
            // otherwise just for transaction history. // 否则仅用于交易交易历史记录。
            AddToWallet(wtxNew, false, pwalletdb); // 添加钱包交易到钱包数据库

            // Notify that old coins are spent // 通知旧的币被花费
            set<CWalletTx*> setCoins; // 钱包交易索引集合
            BOOST_FOREACH(const CTxIn& txin, wtxNew.vin) // 遍历新交易的输入列表
            {
                CWalletTx &coin = mapWallet[txin.prevout.hash]; // 获取输入的上一个输出对应的钱包交易
                coin.BindWallet(this); // 绑定钱包，并标记钱包已变动
                NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED); // 通知钱包交易改变（更新）
            }

            if (fFileBacked) // 若钱包文件已备份
                delete pwalletdb; // 销毁钱包数据库对象
        }

        // Track how many getdata requests our transaction gets // 2.追踪我们的交易获取了多少次 getdata 请求
        mapRequestCount[wtxNew.GetHash()] = 0; // 初始化为 0 次

        if (fBroadcastTransactions) // 若开启了交易广播标志
        {
            // Broadcast // 广播
            if (!wtxNew.AcceptToMemoryPool(false)) // 3.把交易添加到内存池中
            { // 这步不能失败。该交易已经签署并记录。
                // This must not fail. The transaction has already been signed and recorded.
                LogPrintf("CommitTransaction(): Error: Transaction not valid\n");
                return false;
            }
            wtxNew.RelayWalletTransaction(); // 4.中继钱包交易
        }
    }
    return true;
}

bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB & pwalletdb)
{
    if (!pwalletdb.WriteAccountingEntry_Backend(acentry)) // 写入账户条目末端
        return false;

    laccentries.push_back(acentry); // 加入账户条目列表
    CAccountingEntry & entry = laccentries.back(); // 获取列表中的最后一个（该）条目
    wtxOrdered.insert(make_pair(entry.nOrderPos, TxPair((CWalletTx*)0, &entry))); // 插入有序交易映射列表

    return true;
}

CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)
{
    return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));
}

CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)
{
    // payTxFee is user-set "I want to pay this much"
    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);
    // User didn't set: use -txconfirmtarget to estimate...
    if (nFeeNeeded == 0) {
        int estimateFoundTarget = nConfirmTarget;
        nFeeNeeded = pool.estimateSmartFee(nConfirmTarget, &estimateFoundTarget).GetFee(nTxBytes);
        // ... unless we don't have enough mempool data for estimatefee, then use fallbackFee
        if (nFeeNeeded == 0)
            nFeeNeeded = fallbackFee.GetFee(nTxBytes);
    }
    // prevent user from paying a fee below minRelayTxFee or minTxFee
    nFeeNeeded = std::max(nFeeNeeded, GetRequiredFee(nTxBytes));
    // But always obey the maximum
    if (nFeeNeeded > maxTxFee)
        nFeeNeeded = maxTxFee;
    return nFeeNeeded;
}




DBErrors CWallet::LoadWallet(bool& fFirstRunRet)
{
    if (!fFileBacked) // 若非首次运行
        return DB_LOAD_OK; // 返回 0，表示加载完毕
    fFirstRunRet = false; // 首次运行，把该标志置为 false
    DBErrors nLoadWalletRet = CWalletDB(strWalletFile,"cr+").LoadWallet(this); // 从钱包文件中加载钱包到内存
    if (nLoadWalletRet == DB_NEED_REWRITE) // 5 需要重写
    {
        if (CDB::Rewrite(strWalletFile, "\x04pool"))
        {
            LOCK(cs_wallet); // 对钱包上锁
            setKeyPool.clear(); // 清空钥匙池
            // Note: can't top-up keypool here, because wallet is locked. // 注：不能在这里充值钥匙池，因为钱包被锁了。
            // User will be prompted to unlock wallet the next operation // 用户将被提示下一个操作需要一个新密钥来解锁钱包。
            // that requires a new key.
        }
    }

    if (nLoadWalletRet != DB_LOAD_OK) // 若加载错误
        return nLoadWalletRet; // 直接返回加载状态
    fFirstRunRet = !vchDefaultKey.IsValid(); // 否则验证默认公钥是否有效，若有效，设置第一次运行状态为 false

    uiInterface.LoadWallet(this); // UI 交互，加载钱包

    return DB_LOAD_OK; // 0
}


DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)
{
    if (!fFileBacked) // 若钱包未备份
        return DB_LOAD_OK; // 返回 0
    DBErrors nZapWalletTxRet = CWalletDB(strWalletFile,"cr+").ZapWalletTx(this, vWtx); // 打开钱包数据库
    if (nZapWalletTxRet == DB_NEED_REWRITE)
    {
        if (CDB::Rewrite(strWalletFile, "\x04pool")) // 重写钱包数据库文件
        {
            LOCK(cs_wallet); // 钱包上锁
            setKeyPool.clear(); // 密钥池集合清空
            // Note: can't top-up keypool here, because wallet is locked. // 注：这里不能填充密钥池，因为钱包已锁定
            // User will be prompted to unlock wallet the next operation // 在需要新密钥的下一个操作时解锁钱包，
            // that requires a new key. // 系统将提示用户。
        }
    }

    if (nZapWalletTxRet != DB_LOAD_OK)
        return nZapWalletTxRet;

    return DB_LOAD_OK;
}


bool CWallet::SetAddressBook(const CTxDestination& address, const string& strName, const string& strPurpose)
{
    bool fUpdated = false; // 标记钱包地址簿是否更新，指地址已存在更新其用途，新增地址不算
    {
        LOCK(cs_wallet); // mapAddressBook
        std::map<CTxDestination, CAddressBookData>::iterator mi = mapAddressBook.find(address); // 首先在地址簿中查找该地址
        fUpdated = mi != mapAddressBook.end(); // 查找到的话，升级标志置为 true
        mapAddressBook[address].name = strName; // 账户名，若地址已存在，直接改变账户名，否则插入该地址
        if (!strPurpose.empty()) /* update purpose only if requested */ // 用途非空
            mapAddressBook[address].purpose = strPurpose; // 升级该已存在地址的用途
    }
    NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address) != ISMINE_NO,
                             strPurpose, (fUpdated ? CT_UPDATED : CT_NEW) ); // 通知地址簿已改变
    if (!fFileBacked) // 文件未备份
        return false;
    if (!strPurpose.empty() && !CWalletDB(strWalletFile).WritePurpose(CBitcoinAddress(address).ToString(), strPurpose)) // 用途非空时，写入钱包数据库该地址对应的用途
        return false;
    return CWalletDB(strWalletFile).WriteName(CBitcoinAddress(address).ToString(), strName); // 最后写入地址对应的账户名到钱包数据库
}

bool CWallet::DelAddressBook(const CTxDestination& address)
{
    {
        LOCK(cs_wallet); // mapAddressBook

        if(fFileBacked)
        {
            // Delete destdata tuples associated with address
            std::string strAddress = CBitcoinAddress(address).ToString();
            BOOST_FOREACH(const PAIRTYPE(string, string) &item, mapAddressBook[address].destdata)
            {
                CWalletDB(strWalletFile).EraseDestData(strAddress, item.first);
            }
        }
        mapAddressBook.erase(address);
    }

    NotifyAddressBookChanged(this, address, "", ::IsMine(*this, address) != ISMINE_NO, "", CT_DELETED);

    if (!fFileBacked)
        return false;
    CWalletDB(strWalletFile).ErasePurpose(CBitcoinAddress(address).ToString());
    return CWalletDB(strWalletFile).EraseName(CBitcoinAddress(address).ToString());
}

bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)
{
    if (fFileBacked)
    {
        if (!CWalletDB(strWalletFile).WriteDefaultKey(vchPubKey)) // 把默认公钥写入钱包数据库 wallet.dat 中
            return false;
    }
    vchDefaultKey = vchPubKey; // 设置该公钥为默认公钥
    return true;
}

/**
 * Mark old keypool keys as used,
 * and generate all new keys 
 */ // 标记旧密钥池密钥为已使用，并生成全部的新密钥
bool CWallet::NewKeyPool()
{
    {
        LOCK(cs_wallet); // 钱包上锁
        CWalletDB walletdb(strWalletFile); // 创建钱包数据库对象
        BOOST_FOREACH(int64_t nIndex, setKeyPool) // 遍历密钥池索引集合
            walletdb.ErasePool(nIndex); // 根据索引擦除数据库中的密钥
        setKeyPool.clear(); // 清空密钥池索引集合

        if (IsLocked()) // 检查钱包是否加密
            return false;

        int64_t nKeys = max(GetArg("-keypool", DEFAULT_KEYPOOL_SIZE), (int64_t)0); // 获取密钥池大小
        for (int i = 0; i < nKeys; i++)
        {
            int64_t nIndex = i+1;
            walletdb.WritePool(nIndex, CKeyPool(GenerateNewKey())); // 创建新密钥并和索引一起写入钱包数据库
            setKeyPool.insert(nIndex); // 插入密钥池索引集合
        }
        LogPrintf("CWallet::NewKeyPool wrote %d new keys\n", nKeys); // 记录写入新密钥的个数
    }
    return true;
}

bool CWallet::TopUpKeyPool(unsigned int kpSize)
{
    {
        LOCK(cs_wallet);

        if (IsLocked()) // 再次检查钱包是否被锁
            return false;

        CWalletDB walletdb(strWalletFile); // 通过钱包文件名创建钱包数据库对象

        // Top up key pool // 填充满密钥池
        unsigned int nTargetSize;
        if (kpSize > 0) // 这里的 kpSize 默认为 0
            nTargetSize = kpSize;
        else // 所以走这里
            nTargetSize = max(GetArg("-keypool", DEFAULT_KEYPOOL_SIZE), (int64_t) 0); // 钥匙池大小，默认 100

        while (setKeyPool.size() < (nTargetSize + 1)) // 这里可以看出密钥池实际上最多有 nTargetSize + 1 个密钥，默认为 100 + 1 即 101 个
        {
            int64_t nEnd = 1;
            if (!setKeyPool.empty()) // 若密钥集合为空，则从索引为 1 的密钥开始填充
                nEnd = *(--setKeyPool.end()) + 1; // 获取当前密钥池中密钥的最大数量（索引）并加 1
            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey()))) // 创建一个密钥对并把公钥写入钱包数据库文件中
                throw runtime_error("TopUpKeyPool(): writing generated key failed");
            setKeyPool.insert(nEnd); // 将新密钥的索引插入密钥池集合
            LogPrintf("keypool added key %d, size=%u\n", nEnd, setKeyPool.size());
        }
    }
    return true;
}

void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)
{
    nIndex = -1;
    keypool.vchPubKey = CPubKey();
    {
        LOCK(cs_wallet); // 钱包上锁

        if (!IsLocked()) // 若钱包未被加密
            TopUpKeyPool(); // 再次填充密钥池

        // Get the oldest key // 获取时间上最早的密钥
        if(setKeyPool.empty()) // 若密钥池集合为空
            return; // 直接返回

        CWalletDB walletdb(strWalletFile); // 根据钱包文件构造钱包数据库对象

        nIndex = *(setKeyPool.begin()); // 获取最先创建的密钥的索引，大于 0，最小为 1
        setKeyPool.erase(setKeyPool.begin()); // 从密钥池集合中擦除该密钥的索引
        if (!walletdb.ReadPool(nIndex, keypool)) // 根据密钥索引从钱包数据库中读取一个密钥池条目
            throw runtime_error("ReserveKeyFromKeyPool(): read failed");
        if (!HaveKey(keypool.vchPubKey.GetID())) // 通过获取的公钥 ID 检测对应的密钥是否存在
            throw runtime_error("ReserveKeyFromKeyPool(): unknown key in key pool");
        assert(keypool.vchPubKey.IsValid()); // 检查公钥是否有效
        LogPrintf("keypool reserve %d\n", nIndex);
    }
}

void CWallet::KeepKey(int64_t nIndex)
{
    // Remove from key pool // 从密钥池移除指定索引的密钥
    if (fFileBacked) // 若钱包文件已备份
    {
        CWalletDB walletdb(strWalletFile); // 通过钱包文件名构造钱包数据库对象
        walletdb.ErasePool(nIndex); // 根据索引擦除对应的密钥
    }
    LogPrintf("keypool keep %d\n", nIndex);
}

void CWallet::ReturnKey(int64_t nIndex)
{
    // Return to key pool
    {
        LOCK(cs_wallet);
        setKeyPool.insert(nIndex);
    }
    LogPrintf("keypool return %d\n", nIndex);
}

bool CWallet::GetKeyFromPool(CPubKey& result)
{
    int64_t nIndex = 0;
    CKeyPool keypool; // 密钥池条目
    {
        LOCK(cs_wallet);
        ReserveKeyFromKeyPool(nIndex, keypool); // 从密钥池中预定一个密钥，若获取失败，nIndex 为 -1
        if (nIndex == -1) // -1 表示当前 keypool 为空
        {
            if (IsLocked()) return false;
            result = GenerateNewKey(); // 创建新的私钥，并用椭圆曲线加密生成对应的公钥
            return true;
        }
        KeepKey(nIndex); // 从钱包数据库的密钥池中移除该密钥
        result = keypool.vchPubKey;
    }
    return true;
}

int64_t CWallet::GetOldestKeyPoolTime()
{
    int64_t nIndex = 0;
    CKeyPool keypool;
    ReserveKeyFromKeyPool(nIndex, keypool);
    if (nIndex == -1)
        return GetTime();
    ReturnKey(nIndex);
    return keypool.nTime;
}

std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()
{
    map<CTxDestination, CAmount> balances; // 地址余额映射列表

    {
        LOCK(cs_wallet); // 钱包上锁
        BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet) // 遍历钱包交易映射列表
        { // 获取一个钱包条目（交易索引，钱包交易）
            CWalletTx *pcoin = &walletEntry.second; // 获取钱包交易

            if (!CheckFinalTx(*pcoin) || !pcoin->IsTrusted()) // 为最终交易 且 交易可信
                continue; // 跳过

            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0) // 若为创币交易 且 未成熟
                continue; // 跳过

            int nDepth = pcoin->GetDepthInMainChain(); // 获取该交易所在区块的主链深度
            if (nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? 0 : 1))
                continue;

            for (unsigned int i = 0; i < pcoin->vout.size(); i++) // 遍历该交易的输出列表
            {
                CTxDestination addr;
                if (!IsMine(pcoin->vout[i])) // 若交易输出不是我的
                    continue; // 跳过
                if(!ExtractDestination(pcoin->vout[i].scriptPubKey, addr)) // 从交易输出中抽取交易地址
                    continue;

                CAmount n = IsSpent(walletEntry.first, i) ? 0 : pcoin->vout[i].nValue; // 若该交易未花费，获取其输出点的值

                if (!balances.count(addr)) // 结果集中不含该地址
                    balances[addr] = 0; // 初始化
                balances[addr] += n; // 累加地址余额（未花费的输出点）
            }
        }
    }

    return balances; // 返回地址余额映射列表
}

set< set<CTxDestination> > CWallet::GetAddressGroupings()
{
    AssertLockHeld(cs_wallet); // mapWallet
    set< set<CTxDestination> > groupings; // 地址分组集合（即地址集的集合）
    set<CTxDestination> grouping; // 地址分组（地址集）

    BOOST_FOREACH(PAIRTYPE(uint256, CWalletTx) walletEntry, mapWallet) // 遍历钱包交易映射列表
    {
        CWalletTx *pcoin = &walletEntry.second; // 获取钱包交易

        if (pcoin->vin.size() > 0) // 若该交易的输入列表有元素
        {
            bool any_mine = false;
            // group all input addresses with each other
            BOOST_FOREACH(CTxIn txin, pcoin->vin) // 遍历交易输入列表
            {
                CTxDestination address;
                if(!IsMine(txin)) /* If this input isn't mine, ignore it */ // 若该输入不是我的
                    continue; // 跳过
                if(!ExtractDestination(mapWallet[txin.prevout.hash].vout[txin.prevout.n].scriptPubKey, address)) // 从交易输入的前一边交易输出的脚本公钥提取地址
                    continue; // 失败跳过
                grouping.insert(address); // 插入地址分组
                any_mine = true;
            }

            // group change with input addresses
            if (any_mine) // 找零输出
            {
               BOOST_FOREACH(CTxOut txout, pcoin->vout) // 遍历该交易的输出列表
                   if (IsChange(txout)) // 输出是否为找零
                   {
                       CTxDestination txoutAddr;
                       if(!ExtractDestination(txout.scriptPubKey, txoutAddr)) // 从交易输出脚本公钥提取交易输出地址
                           continue; // 失败跳过
                       grouping.insert(txoutAddr); // 插入地址分组
                   }
            }
            if (grouping.size() > 0) // 若地址分组中有地址
            {
                groupings.insert(grouping); // 插入地址分组集合
                grouping.clear(); // 同时清空该地址分组
            }
        }

        // group lone addrs by themselves
        for (unsigned int i = 0; i < pcoin->vout.size(); i++) // 遍历交易输入列表
            if (IsMine(pcoin->vout[i])) // 若交易输出是我的
            {
                CTxDestination address;
                if(!ExtractDestination(pcoin->vout[i].scriptPubKey, address)) // 从输出的脚本公钥提取地址
                    continue; // 失败跳过
                grouping.insert(address); // 插入地址分组
                groupings.insert(grouping); // 插入地址分组集合
                grouping.clear();
            }
    }

    set< set<CTxDestination>* > uniqueGroupings; // a set of pointers to groups of addresses
    map< CTxDestination, set<CTxDestination>* > setmap;  // map addresses to the unique group containing it
    BOOST_FOREACH(set<CTxDestination> grouping, groupings) // 遍历交易地址分组集合
    {
        // make a set of all the groups hit by this new group
        set< set<CTxDestination>* > hits; // 地址分组指针集合
        map< CTxDestination, set<CTxDestination>* >::iterator it;
        BOOST_FOREACH(CTxDestination address, grouping) // 遍历地址分组
            if ((it = setmap.find(address)) != setmap.end())
                hits.insert((*it).second);

        // merge all hit groups into a new single group and delete old groups
        set<CTxDestination>* merged = new set<CTxDestination>(grouping);
        BOOST_FOREACH(set<CTxDestination>* hit, hits) // 遍历地址分组指针集合
        {
            merged->insert(hit->begin(), hit->end());
            uniqueGroupings.erase(hit);
            delete hit;
        }
        uniqueGroupings.insert(merged);

        // update setmap
        BOOST_FOREACH(CTxDestination element, *merged)
            setmap[element] = merged;
    }

    set< set<CTxDestination> > ret;
    BOOST_FOREACH(set<CTxDestination>* uniqueGrouping, uniqueGroupings)
    {
        ret.insert(*uniqueGrouping);
        delete uniqueGrouping;
    }

    return ret;
}

std::set<CTxDestination> CWallet::GetAccountAddresses(const std::string& strAccount) const
{
    LOCK(cs_wallet); // 钱包上锁
    set<CTxDestination> result; // 交易目的地址集
    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& item, mapAddressBook) // 遍历地址簿映射列表
    {
        const CTxDestination& address = item.first; // 获取目的（交易输出）地址
        const string& strName = item.second.name; // 获取账户名
        if (strName == strAccount) // 若为指定账户名
            result.insert(address); // 插入交易目的地址集
    }
    return result; // 返回地址集
}

bool CReserveKey::GetReservedKey(CPubKey& pubkey) // 从密钥池中取一个公钥
{
    if (nIndex == -1) // 初始化为 -1
    {
        CKeyPool keypool;
        pwallet->ReserveKeyFromKeyPool(nIndex, keypool);
        if (nIndex != -1)
            vchPubKey = keypool.vchPubKey;
        else {
            return false;
        }
    }
    assert(vchPubKey.IsValid()); // 检测公钥的有效性
    pubkey = vchPubKey;
    return true;
}

void CReserveKey::KeepKey()
{
    if (nIndex != -1)
        pwallet->KeepKey(nIndex); // 从密钥池中移除指定索引的密钥
    nIndex = -1;
    vchPubKey = CPubKey();
}

void CReserveKey::ReturnKey()
{
    if (nIndex != -1)
        pwallet->ReturnKey(nIndex); // 把密钥重新放回密钥池
    nIndex = -1;
    vchPubKey = CPubKey();
}

void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const
{
    setAddress.clear(); // 清空地址集合

    CWalletDB walletdb(strWalletFile); // 创建钱包数据库对象

    LOCK2(cs_main, cs_wallet); // 钱包上锁
    BOOST_FOREACH(const int64_t& id, setKeyPool) // 遍历密钥池索引集合
    {
        CKeyPool keypool; // 创建一个密钥池条目
        if (!walletdb.ReadPool(id, keypool)) // 根据索引从数据库中读相应的密钥到密钥池条目
            throw runtime_error("GetAllReserveKeyHashes(): read failed");
        assert(keypool.vchPubKey.IsValid()); // 检查该密钥对应公钥是否有效
        CKeyID keyID = keypool.vchPubKey.GetID(); // 获取公钥索引
        if (!HaveKey(keyID)) // 检查该索引对应密钥是否存在
            throw runtime_error("GetAllReserveKeyHashes(): unknown key in key pool");
        setAddress.insert(keyID); // 插入地址集合
    }
}

void CWallet::UpdatedTransaction(const uint256 &hashTx)
{
    {
        LOCK(cs_wallet);
        // Only notify UI if this transaction is in this wallet
        map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(hashTx);
        if (mi != mapWallet.end())
            NotifyTransactionChanged(this, hashTx, CT_UPDATED);
    }
}

void CWallet::GetScriptForMining(boost::shared_ptr<CReserveScript> &script)
{
    boost::shared_ptr<CReserveKey> rKey(new CReserveKey(this)); // 新建一个派生类对象
    CPubKey pubkey;
    if (!rKey->GetReservedKey(pubkey)) // 从密钥池中取一个公钥
        return;

    script = rKey; // 把派生类对象赋值给基类对象（派生类 -> 基类）的引用
    script->reserveScript = CScript() << ToByteVector(pubkey) << OP_CHECKSIG; // 把公钥导入脚本
}

void CWallet::LockCoin(COutPoint& output)
{
    AssertLockHeld(cs_wallet); // setLockedCoins
    setLockedCoins.insert(output); // 加入锁定的交易输出集合
}

void CWallet::UnlockCoin(COutPoint& output)
{
    AssertLockHeld(cs_wallet); // setLockedCoins
    setLockedCoins.erase(output); // 擦除指定的交易输出
}

void CWallet::UnlockAllCoins()
{
    AssertLockHeld(cs_wallet); // setLockedCoins
    setLockedCoins.clear(); // 清空锁定的交易输出集合
}

bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const
{
    AssertLockHeld(cs_wallet); // setLockedCoins
    COutPoint outpt(hash, n); // 构建输出点对象

    return (setLockedCoins.count(outpt) > 0); // 若在锁定的交易集合中存在，返回 true
}

void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)
{
    AssertLockHeld(cs_wallet); // setLockedCoins
    for (std::set<COutPoint>::iterator it = setLockedCoins.begin();
         it != setLockedCoins.end(); it++) {
        COutPoint outpt = (*it);
        vOutpts.push_back(outpt);
    }
}

/** @} */ // end of Actions

class CAffectedKeysVisitor : public boost::static_visitor<void> {
private:
    const CKeyStore &keystore;
    std::vector<CKeyID> &vKeys;

public:
    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}

    void Process(const CScript &script) {
        txnouttype type;
        std::vector<CTxDestination> vDest;
        int nRequired;
        if (ExtractDestinations(script, type, vDest, nRequired)) {
            BOOST_FOREACH(const CTxDestination &dest, vDest)
                boost::apply_visitor(*this, dest);
        }
    }

    void operator()(const CKeyID &keyId) {
        if (keystore.HaveKey(keyId))
            vKeys.push_back(keyId);
    }

    void operator()(const CScriptID &scriptId) {
        CScript script;
        if (keystore.GetCScript(scriptId, script))
            Process(script);
    }

    void operator()(const CNoDestination &none) {}
};

void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {
    AssertLockHeld(cs_wallet); // mapKeyMetadata
    mapKeyBirth.clear(); // 清空密钥创建时间映射列表

    // get birth times for keys with metadata // 获取密钥元数据的创建时间
    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++) // 遍历密钥元数据列表
        if (it->second.nCreateTime) // 若创建时间非 0
            mapKeyBirth[it->first] = it->second.nCreateTime; // 加入映射

    // map in which we'll infer heights of other keys
    CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganised; use a 144-block safety margin
    std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock; // 密钥区块索引映射列表
    std::set<CKeyID> setKeys; // 密钥索引集合
    GetKeys(setKeys);
    BOOST_FOREACH(const CKeyID &keyid, setKeys) { // 遍历该索引集合
        if (mapKeyBirth.count(keyid) == 0) // 该密钥索引在密钥创建时间映射列表中不存在
            mapKeyFirstBlock[keyid] = pindexMax; // 加入密钥区块索引映射列表
    }
    setKeys.clear(); // 清空密钥索引集合

    // if there are no such keys, we're done
    if (mapKeyFirstBlock.empty()) // 若密钥区块索引映射列表为空
        return;

    // find first block that affects those keys, if there are any left // 找到影响这些密钥的首个区块，如果有剩余
    std::vector<CKeyID> vAffected;
    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {
        // iterate over all wallet transactions... // 迭代全部钱包交易
        const CWalletTx &wtx = (*it).second;
        BlockMap::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);
        if (blit != mapBlockIndex.end() && chainActive.Contains(blit->second)) {
            // ... which are already in a block // 已经在一个块中
            int nHeight = blit->second->nHeight;
            BOOST_FOREACH(const CTxOut &txout, wtx.vout) {
                // iterate over all their outputs // 迭代全部输出
                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);
                BOOST_FOREACH(const CKeyID &keyid, vAffected) {
                    // ... and all their affected keys // 受影响的全部密钥
                    std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);
                    if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)
                        rit->second = blit->second;
                }
                vAffected.clear();
            }
        }
    }

    // Extract block timestamps for those keys // 提取这些密钥的区块时间戳
    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)
        mapKeyBirth[it->first] = it->second->GetBlockTime() - 7200; // block times can be 2h off // 和块时间相差 2h
}

bool CWallet::AddDestData(const CTxDestination &dest, const std::string &key, const std::string &value)
{
    if (boost::get<CNoDestination>(&dest))
        return false;

    mapAddressBook[dest].destdata.insert(std::make_pair(key, value));
    if (!fFileBacked)
        return true;
    return CWalletDB(strWalletFile).WriteDestData(CBitcoinAddress(dest).ToString(), key, value);
}

bool CWallet::EraseDestData(const CTxDestination &dest, const std::string &key)
{
    if (!mapAddressBook[dest].destdata.erase(key))
        return false;
    if (!fFileBacked)
        return true;
    return CWalletDB(strWalletFile).EraseDestData(CBitcoinAddress(dest).ToString(), key);
}

bool CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)
{
    mapAddressBook[dest].destdata.insert(std::make_pair(key, value));
    return true;
}

bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const
{
    std::map<CTxDestination, CAddressBookData>::const_iterator i = mapAddressBook.find(dest);
    if(i != mapAddressBook.end())
    {
        CAddressBookData::StringMap::const_iterator j = i->second.destdata.find(key);
        if(j != i->second.destdata.end())
        {
            if(value)
                *value = j->second;
            return true;
        }
    }
    return false;
}

CKeyPool::CKeyPool()
{
    nTime = GetTime();
}

CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn)
{
    nTime = GetTime();
    vchPubKey = vchPubKeyIn;
}

CWalletKey::CWalletKey(int64_t nExpires)
{
    nTimeCreated = (nExpires ? GetTime() : 0);
    nTimeExpires = nExpires;
}

int CMerkleTx::SetMerkleBranch(const CBlock& block)
{
    AssertLockHeld(cs_main);
    CBlock blockTmp;

    // Update the tx's hashBlock
    hashBlock = block.GetHash();

    // Locate the transaction
    for (nIndex = 0; nIndex < (int)block.vtx.size(); nIndex++)
        if (block.vtx[nIndex] == *(CTransaction*)this)
            break;
    if (nIndex == (int)block.vtx.size())
    {
        nIndex = -1;
        LogPrintf("ERROR: SetMerkleBranch(): couldn't find tx in block\n");
        return 0;
    }

    // Is the tx in a block that's in the main chain
    BlockMap::iterator mi = mapBlockIndex.find(hashBlock);
    if (mi == mapBlockIndex.end())
        return 0;
    const CBlockIndex* pindex = (*mi).second;
    if (!pindex || !chainActive.Contains(pindex))
        return 0;

    return chainActive.Height() - pindex->nHeight + 1;
}

int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const
{
    if (hashUnset()) // 判断该区块的有效性
        return 0;

    AssertLockHeld(cs_main); // 验证锁状态

    // Find the block it claims to be in // 找到该交易声明在的区块
    BlockMap::iterator mi = mapBlockIndex.find(hashBlock); // 获取对应区块的迭代器
    if (mi == mapBlockIndex.end()) // 若没找到，则返回 0
        return 0;
    CBlockIndex* pindex = (*mi).second; // 获取区块索引
    if (!pindex || !chainActive.Contains(pindex)) // 检查该区块是否在激活主链上
        return 0;

    pindexRet = pindex;
    return ((nIndex == -1) ? (-1) : 1) * (chainActive.Height() - pindex->nHeight + 1); // 返回深度，链尖的深度为 1
}

int CMerkleTx::GetBlocksToMaturity() const
{
    if (!IsCoinBase()) // 必须是创币交易
        return 0;
    return max(0, (COINBASE_MATURITY+1) - GetDepthInMainChain()); // 获取据成熟所需的区块数
}


bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)
{
    CValidationState state; // 验证状态
    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, false, fRejectAbsurdFee); // 添加交易到内存池
}
